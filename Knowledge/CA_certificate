More information:
https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
https://deliciousbrains.com/https-locally-without-browser-privacy-errors/
https://en.wikipedia.org/wiki/Transport_Layer_Security
https://www.jianshu.com/p/b0b6b88fe9fe        # Https process

CA:  Certificate Authorities 
SSL: Secure Scoket Layer, SSL is the old name. It is called TLS these days.
TSL: Transport Layer Security

--------------------------------------------------- SSL vs TSL -----------------------------------------------------------------
SSL was originally developed by Netscape and first came onto the scene way back in 1995 with SSL 2.0 
(1.0 was never released to the public).  Version 2.0 was quickly replaced by SSL 3.0 in 1996 after a number of 
vulnerabilities were found.  Note: Versions 2.0 and 3.0 are sometimes written as SSLv2 and SSLv3.

TLS was introduced in 1999 as a new version of SSL and was based on SSL 3.0:
" The differences between this protocol and SSL 3.0 are not dramatic, but they are significant enough that TLS 1.0 and SSL 3.0 
do not interoperate. "
TLS is currently at v. 1.3 (defined in FRF 8446 in August 2018).

it’s important to note that certificates are not dependent on protocols. 
That is, you don’t need to use a TLS Certificate vs. an SSL Certificate. While many vendors tend to use 
the phrase “SSL/TLS Certificate”, it may be more accurate to call them “Certificates for use with SSL and TLS", 
since the protocols are determined by your server configuration, not the certificates themselves.

It’s worth noting here that SSL and TLS simply refer to the handshake that takes place between a client and a server. 
The handshake doesn’t actually do any encryption itself, it just agrees on a shared secret and type of encryption 
that is going to be used.


HTTPS要使客户端与服务器端的通信过程得到安全保证，必须使用的对称加密算法，但是协商对称加密算法的过程，需要使用非对称加密算法来保证安全，
然而直接使用非对称加密的过程本身也不安全，会有中间人篡改公钥的可能性，所以客户端与服务器不直接使用公钥，而是使用数字证书签发机构颁发的证书
来保证非对称加密过程本身的安全。这样通过这些机制协商出一个对称加密算法，就此双方使用该算法进行加密解密。从而解决了客户端与服务器端之间的
通信安全问题。


--------------------------------------------------- CA Types -----------------------------------------------------------------
DV SSL
DV SSL证书是只验证网站域名所有权的简易型（Class 1级）SSL证书，可10分钟快速颁发，能起到加密传输的作用，但无法向用户证明网站的真实身份。
目前市面上的免费证书都是这个类型的，只是提供了对数据的加密，但是对提供证书的个人和机构的身份不做验证。

OV SSL
OV SSL,提供加密功能,对申请者做严格的身份审核验证,提供可信证明。
和DV SSL的区别在于，OV SSL 提供了对个人或者机构的审核，能确认对方的身份，安全性更高。所以这部分的证书申请是收费的。

EV SSL
超安=EV=最安全、最严格 超安EV SSL证书遵循全球统一的严格身份验证标准，是目前业界安全级别最高的顶级 (Class 4级)SSL证书。
金融证券、银行、第三方支付、网上商城等，重点强调网站安全、企业可信形象的网站，涉及交易支付、客户隐私信息和账号密码的传输。
这部分的验证要求最高，申请费用也是最贵的。

根据保护域名的数量需求，SSL证书又分为：
单域名版：只保护一个域名，例如 www.abc.com 或者 login.abc.com 之类的单个域名
多域名版：一张证书可以保护多个域名，例如同时保护 www.abc.com , www.bcd.com, pay.efg.com 等
通配符版：一张证书保护同一个主域名下同一级的所有子域名，不限个数，形如 *.abc.com 。
注意，通配符版只有 DVSSL 和 OVSSL 具有， EVSSL 不具有通配符版本。


------------------------------------------- CA Public Certificate Bundle for cURL-----------------------------------------------
What is the SSL Certificate Chain?
https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/

Question: 
I have a SSL enabled eCommerce website which uses cURL for payment processing. Everything is running well but recently 
I learned about "CA Public Certification Bundle for cUrl" that its a good idea to use it for cURL connections.
If this is true than can someone tell me how or how is it better/different than using the standard SSL?

Answer:
A "CA certificate bundle" would be a set of trust anchors. You can build your own by looking for CAs you're willing to
trust, or you can use an existing bundle. Most OSes or browser come with an existing bundle. cURL in itself doesn't but
it can rely on a pre-defined location (set at compile time) or it also suggests to use the Firefox bundle (via a
conversion mechanism). (You can override default setting via extra options, on the command line or via the API.)

Certificate Pinning (which you also mention) has nothing to do with a CA cert bundle. In fact, it's almost the opposite.
Instead of relying on 3rd party trust anchors (the certification authorities), you explicitly "pin" a set of server
certificates you know as directly trusted. They're not used to verify other certificates, instead, you compare the
certificate you get with the exact certificate you're expecting for that host (or at least you compare public keys).
This is more like having a reference mapping from server name to certificate (or to public key) and comparing what you
get from that host with the reference you have. Of course, this can only work for a reasonably small set of certificates
in practice, unlike the CA (PKI) approach which is designed to let you authenticate parties you have never encountered
before (via a 3rd party: the CA).

Using a CA certificate bundle isn't different than using "standard SSL", it is what's commonly used for SSL/TLS
connections. You often don't see it because that CA bundle is often supplied with your client (or with the OS). Note
that strictly speaking, this is orthogonal to SSL/TLS itself, which mainly just says you should authenticate the server.
Certificate verification (the PKI way, via CA certificates) is defined in a different specification, also complemented
by a specification on how to verify the name in the certificate (and the HTTPS specification of course).


-------------------------------------------------- .key .csr .pem ------------------------------------------------------
More information:
https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file

What is a Pem file and how does it differ from other OpenSSL Generated Key File Formats?

.csr - This is a Certificate Signing Request. Some applications can generate these for submission to
certificate-authorities. The actual format is PKCS10 which is defined in RFC 2986. It includes some/all of the key
details of the requested certificate such as subject, organization, state, whatnot, as well as the public key of the
certificate to get signed. These get signed by the CA and a certificate is returned. The returned certificate is the
public certificate (which includes the public key but not the private key), which itself can be in a couple of formats.

.pem - Defined in RFCs 1421 through 1424, this is a container format that may include just the public certificate (such
as with Apache installs, and CA certificate files /etc/ssl/certs), or may include an entire certificate chain including
public key, private key, and root certificates. Confusingly, it may also encode a CSR (e.g. as used here) as the PKCS10
format can be translated into PEM. The name is from Privacy Enhanced Mail (PEM), a failed method for secure email but
the container format it used lives on, and is a base64 translation of the x509 ASN.1 keys.  

.key - This is a PEM formatted file containing just the private-key of a specific certificate and is merely 
a conventional name and not a standardized one. In Apache installs, this frequently resides in /etc/ssl/private. 
The rights on these files are very important, and some programs will refuse to load these certificates if they are 
set wrong.  

.pkcs12 .pfx .p12 - Originally defined by RSA in the Public-Key Cryptography Standards (abbreviated PKCS), the "12" 
variant was originally enhanced by Microsoft, and later submitted as RFC 7292. This is a passworded container format 
that contains both public and private certificate pairs. Unlike .pem files, this container is fully encrypted. 
Openssl can turn this into a .pem file with both public and private keys: 
  openssl pkcs12 -in file-to-convert.p12 -out converted-file.pem -nodes 

A few other formats that show up from time to time:
.der - A way to encode ASN.1 syntax in binary, a .pem file is just a Base64 encoded .der file. OpenSSL can convert these
to .pem (openssl x509 -inform der -in to-convert.der -out converted.pem). Windows sees these as Certificate files. By
default, Windows will export certificates as .DER formatted files with a different extension. 

.cert .cer .crt - A .pem (or rarely .der) formatted file with a different extension, one that is recognized by Windows 
Explorer as a certificate, which .pem is not.  

.p7b .keystore - Defined in RFC 2315 as PKCS number 7, this is a format used by Windows for certificate interchange. 
Java understands these natively, and often uses .keystore as an extension instead. Unlike .pem style certificates, 
this format has a defined way to include certification-path certificates.  

.crl - A certificate revocation list. Certificate Authorities produce these as a way to de-authorize certificates 
before expiration. You can sometimes download them from CA websites.  


In summary, there are four different ways to present certificates and their components:
--PEM    - Governed by RFCs, its used preferentially by open-source software. It can have a variety of extensions 
           (.pem, .key, .cer, .cert, more). 
--PKCS7  - An open standard used by Java and supported by Windows. Does not contain private key material.  
--PKCS12 - A Microsoft private standard that was later defined in an RFC that provides enhanced security 
            versus the plain-text PEM format. This can contain private key material. Its used preferentially 
            by Windows systems, and can be freely converted to PEM format through use of openssl.
--DER    - The parent format of PEM. It's useful to think of it as a binary version of the base64-encoded PEM file. 
            Not routinely used very much outside of Windows.


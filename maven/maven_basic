---------------------------------------------------- basic ------------------------------------------------------------------
There are three built-in build lifecycles: 
  -- clean
  -- default
  -- site

Each of these build lifecycles is defined by a different list of build phases, 
wherein a build phase represents a stage in the lifecycle.

A goal represents a specific task (finer than a build phase) which contributes to the building and managing of a project. 

Plugins are artifacts that provide goals to Maven. Furthermore, a plugin may have one or more goals 
wherein each goal represents a capability of that plugin.

Maven的一个哲学是惯例优于配置(Convention Over Configuration)

每个生命周期包含了多个步骤（phase），而 goal 则是绑定到 phase 上的，每一个 phase 都对应 1 个或多个goal。

goal是存在于maven plugin中，因此，大多数的maven功能实际上是存在于插件中，一个maven插件提供了一组可以被运行的goal。
maven 中可以通过下面的命令格式运行goal: 
mvn [plugin-name]:[goal-name]
例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：
mvn compiler:compile


运行某个phase的时，必须把生命周期中的所有的前置 phase 都会运行一遍。
而运行goal，可以脱离生命周期这个概念，通过maven插件，单独的运行某个goal或一组goal。 

phase其实就是goal的容器。实际被执行的都是goal。phase被执行时，实际执行的都是被绑定到该phase的goal。
goal与goal之间是独立的。因此单独执行一个goal不会导致其他goal被执行。

scoppe的分类:
  compile :   默认就是compile,表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。
  test:       表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。
  runtime:    表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。
  provided:   意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。
  system:     从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需要配合systemPath属性使用。

---------------------------------------------------- Lifecycle ----------------------------------------------------------------
Clean Lifecycle
    pre-clean
    clean
    post-clean

Default Lifecycle
    validate
    initialize
    generate-sources
    process-sources
    generate-resources
    process-resources
    compile
    process-classes
    generate-test-sources
    process-test-sources
    generate-test-resources
    process-test-resources
    test-compile
    process-test-classes
    test
    prepare-package
    package
    pre-integration-test
    integration-test
    post-integration-test
    verify
    install
    deploy

Site Lifecycle
    Phase
    pre-site
    site
    post-site
    site-deploy

---------------------------------------------------- proxy ------------------------------------------------------------------

修改maven的配置文件{maven_home}/conf/settings.xml, 在proxys节点下增加proxy设置
<proxy>
  <id>proxy</id>
  <active>true</active>
  <protocol>http</protocol>
  <username>账号</username>
  <password>明文密码</password>
  <host>172.18.32.221</host>
  <port>8080</port>
  <nonProxyHosts>localhost|127.0.0.*|10.*|192.168.*|*.huawei.com</nonProxyHosts>
</proxy>

在mirrors几点下增加镜像设置，如下是阿里云镜像
<mirror>
  <id>alimaven</id>
  <name>aliyun maven</name>
  <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
  <mirrorOf>central</mirrorOf>       
</mirror>

如果依赖的下载地址是https协议，则仍无法下载成功，解决方法：Maven可以通过命令行参数忽略所有证书。
-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true
D:\> mvn pakage -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true

another solution: 
https://maven.apache.org/guides/mini/guide-repository-ssl.html#
https://stackoverflow.com/questions/25911623/problems-using-maven-and-ssl-behind-proxy
https://blog.csdn.net/sd2131512/article/details/78855238

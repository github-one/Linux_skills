Q:  Difference between \n and \r?
A:  
- in Unix and all Unix-like systems, \n is the code for end-of-line, \r means nothing special.
- as a consequence, in C and most languages that somehow copy it (even remotely), \n is the standard escape sequence 
for end of line (translated to/from OS-specific sequences as needed)

- in old Mac systems (pre-OS X), \r was the code for end-of-line instead
- in Windows (and many old OSs), the code for end of line is 2 characters, \r\n, in this order
- as a (surprising;-) consequence (harking back to OSs much older than Windows), \r\n is the standard line-termination 
for text formats on the Internet

- for electromechanical teletype-like "terminals", \r commands the carriage to go back leftwards until it hits the leftmost stop 
(a slow operation), \n commands the roller to roll up one line (a much faster operation) 

-- that's the reason you always have \r before \n, so that the roller can move while the carriage is still going leftwards!-) 
Wikipedia has a more detailed explanation.

- for character-mode terminals (typically emulating even-older printing ones as above), in raw mode, \r and \n act similarly 
(except both in terms of the cursor, as there is no carriage or roller;-)


Q:  How can I resume a stopped job in Linux?
A:  Use the command fg.
        $ fg
        $ fg 3          # Here 3 is job number.
    
    The general job control commands in Linux are:
    jobs - list the current jobs
    fg - resume the job that's next in the queue
    fg number - resume job number
    fg %[number] - resume job [number]
    bg - Push the next job in the queue into the background
    bg %[number] - Push the job [number] into the background
    kill %[number] - Kill the job numbered [number]
    kill -[signal] %[number] - Send the signal [signal] to job number [number]
    disown %[number] - disown the process(no more terminal will be owner), so command will be alive 
    even after closing the terminal.
    
    Note: the % infront of the job number in the commands - this is what tells kill you're talking 
    about jobs and not processes.


The command fg is what you want to use. You can also give it a job number if there are more than one stopped jobs.



Q:  How to get the current time?
A:  $ date "+%Y-%m-%d %H:%M:%S"
    Note: The output format of date depends on the "locale" setting.

Q:  How to use grep to get anything just after 'name='?
A:  $ grep -P '(?<=name=)[ A-Za-z0-9]*' filename
    The -P makes grep use the Perl dialect, otherwise you'd probably need to escape the parentheses. 

Q:  How to extract a number from a string?
A:  grep:   $ grep -Eo "[0-9]{1,4}" testfile
            Here "-o" is used to only output the matching segment of the line, rather than the full contents of the line.
    
    tr:     $ NUMBER=$( echo "I am 999 years old." | tr -dc '0-9' )
            $ echo $NUMBER
            999
            
    sed:    $ NUMBER=$( echo "I am 999 years old." | sed 's/[^0-9]*//g' )
            $ echo $NUMBER
            999
            
    grep:   $ NUMBER=$( echo "I am 999 years old." | grep -o -E '[0-9]+' )
            $ echo $NUMBER
            999           


Q:  How can I repeat a character in bash?
        like: perl -E 'say '=' x 100'
        
A:  printf '=%.0s' {1..10}
    print -- '-%.0s' {1..10}
    
    Note: '=%.0s' means that printf will always print a single = no matter what argument it is given.
    The %.0s flag is meant to do nothing, just be there to pick up arguments. Then, if bash gets more arguments 
    than it has format specifiers, it will simply print out multiple copies, grabbing as many as it needs.
    
    printf %100s | tr ' ' '-' ; echo ""
    
    $ echo $temp{0..10}"test"             # $temp is null but it will repeat "test"
    test test test test test test test test test test
    
    $ echo {0..5}" test "
    0 test 1 test 2 test 3 test 4 test 5 test 
    
    $ echo $temp{0..5}"test" | tr -d ' '
    testtesttesttesttest
    
    $echo -e ''$_{1..80}'\b+'      
    It repeats any string or char n times without spaces between it.    
    Here $_{1..80} means $_1, $_2, $_3, ..., $_80, which all has null string.
    '\b' means backspace.
        

Q:  Is it possible to write the numbers of the sequence in the same line?
A:  Try these:
        $ echo $(seq 10)
        1 2 3 4 5 6 7 8 9 10

        $ echo $(seq 5 10)
        5 6 7 8 9 10

        $ echo $(echo "for (i=0;i<=1000;i++) i"| bc)

        echo {1..10}            # in Bash

        $ seq -s ' ' 1 5
        1 2 3 4 5

        $ var="$(seq -s ' ' 1 5)"
        $ echo "$var"
        1 2 3 4 5


Q:  How do I iterate over a range of numbers defined by variables in Bash?
    Like this:
        start=1
        end=10
        echo {$start..$end}
A1:  In bash, brace expansion happens before variable expansion, so this is not directly possible.
    Instead, use an arithmetic for loop:    
        start=1
        end=10
        for ((i=start; i<end; i++))
        do
            echo "i: $i"
        done
A2:  for i in $( seq 1 $end); do echo $i; done


Q:  How can I add a comma at the end of every line except the last line?
A:  sed '$!/s/$/,/' file
    
    The $ in the address refers to the last line while $! matches lines which are not the last.
    The $ in the regular expression in the substitution refers to the last character position on every line.
    
    The following is more complicated. On the fist line substition in an openning square bracket at the beginning of
    line(s/^/[/). On lines which are not the first, add a trailing comma. On the last line add a closing square barcket
    (s/$/]/).
        sed '1s/^/[/;$!s/$/,/;$s/$/]/' file
    Many sed dialects also allow you to split this into multiple -e arguments.


Q:  How do I grep for multiple patterns with a pipe character?
A:  First, you need to protect the pattern from expansion by the shell. The easiest way to do that is to
    put single quotes around it. Single quotes prevent expansion of anything between them(inlcuding backslashes);
    The only thing you can't do then is the single quotes in the pattern. If you need a single quote, you can
    write it as '\''.
    Second, grep supports two syntaxes for patterns. 
    BRE(basic regular expression) doen't support the alternation(|) operator, THOUGH some versions have it 
    as an extension, but written with a backslash.
        grep 'foo\|bar' *.txt
    ERE(extened regular expression) is better. You need to pass the -E option to grep. On Linux, you can also
    type egrep instead of grep -E
        grep -E 'foo|bar' *.txt
    Third, pass multiple -e to grep.
        grep -e foo -e bar *.txt


Q:  Why is the size of “/proc/kcore” file so bigger than the physical memory size?
A:  kcore is the virtual allocation of your RAM for the kernel. 
    On 64 bit systems that size can be an absolute limit of 128T since that is the most the system can allocate.
    A range of pseudo and virtual filesystems exists which exposes information about processes and other system information 
    in a hierarchical file-like structure. These are mounted into the single file hierarchy.
    An example of this purely virtual filesystem is under /proc that exposes many system properties as files.
    
    
Q:  In the shell, what does "2>&1" mean?
A:  File descriptor 1 is the standard output (stdout).
    File descriptor 2 is the standard error (stderr).

    Here is one way to remember this construct (although it is not entirely accurate): 
       at first, 2>1 may look like a good way to redirect stderr to stdout. 
       However, it will actually be interpreted as "redirect stderr to a file named 1". 
       & indicates that what follows is a file descriptor and not a filename. 
       So the construct becomes: 2>&1. 
    
    Note: 
    1. command > output is just a shortcut for command 1> output.
    2. You can use &[FILE_DESCRIPTOR] to reference a file descriptor value.
    3. This often happens when using process expansion (the ` ` or $( ) operators), 
       which normally only captures stdout, but you may want to include stderr in it. 
       In this case, you would also use >& to point stderr to stdout:
           out=$(app 2>&1)
    4. When using grep, or similar utility, since the pipe | normally only works on stdout, 
       you would redirect stderr to stdout before using the pipe:
           app 2>&1 | grep hello
    
Q:  What is the difference between: cmd 2>&1 > log vs cmd > log 2>&1
A:  If you say 2>&1 then you are redirecting stderr to wherever stdout is currently redirected to. 
    If stdout is going to the console then stderr is, too. If stdout is going to a file then stderr is as well. 
    
    If you follow this up by then redirecting stdout, stderr still points to what stdout used to point to. 
    It does not "follow" stdout to the new location.
 
        # Right
        cmd > log 2>&1
        This redirects stdout to log and then redirects stderr to wherever stdout is now being redirected, which is log.

        End result: both stdout and stderr are redirected to log.

        # Wrong
        cmd 2>&1 > log
        This redirects stderr to wherever stdout is currently being redirected, which is typically the console. 
        Then stdout is redirected to log. Remember that stderr does not "follow" stdout, so it continues to 
        redirect to the console.

        End result: stdout is redirected to the log file and stderr is (still) sent to the console. 
        This is almost certainly not what you want. 


Q:  'echo' without newline in a shell script
A:   echo -n "something"
     But this is not portable among various implementations of 'echo' builtin/external executable. 
     The portable way would be to use 'prinft' instead:
         printf "something"
         printf "something\n"
         printf '%s' "$x"
          
Q:  How to include dashes '--' in the format stirng of bash printf?
        $ printf "--files"
    It generates an error:
        sh: printf --: invalid option       
        
A:  Try this:
        $ printf -- "--files"
    
    Always specify end of command line flags when using strings involving '--'. In general the shell commands
    need to know where their positional argument start at. So by forcing '--' after printf we let it know
    that th subsequent arguments are to be interpreted as its arguments. At this point, afterwards using --
    will be treaed literally instead of being considered as a command lines switch.
    
    
Q:  How to append multiple lines to a file?
A:  Three ways
        # possibility 1:
        echo "line 1" >> greetings.txt
        echo "line 2" >> greetings.txt

        # possibility 2:
        echo "line 1
        line 2" >> greetings.txt

        # possibility 3:
        cat <<EOT >> greetings.txt
        line 1
        line 2
        EOT


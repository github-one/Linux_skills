
Ubuntu
    System-wide proxies in Ubuntu must be set as environment variables. 
    For temporary settings, you may use "export" command to set proxy variables.
    
    For the persisten, single user settings, the file is ~/.bashrc or ~/.bash_profile
    For the persiten, all users settings, the file is /etc/environment
    Add the following lines. Notes: You must duplicate in both upper-case and lower-case because some programs only look for one 
    or the other.
    
    http_proxy="http://myproxy.server.com:8080/"
    https_proxy="http://myproxy.server.com:8080/"
    ftp_proxy="http://myproxy.server.com:8080/"
    no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    HTTP_PROXY="http://myproxy.server.com:8080/"
    HTTPS_PROXY="http://myproxy.server.com:8080/"
    FTP_PROXY="http://myproxy.server.com:8080/"
    NO_PROXY="localhost,127.0.0.1,localaddress,.localdomain.com"
    
    apt-get, aptitude, etc. will not obey the environment variables when used normally with sudo.
    
Ubuntu apt proxy settings
    Add the following lines in the file /etc/apt/apt.conf
    
    Acquire::http::proxy "http://myname:mypassword@myproxy.server.com:8080/";
    Acquire::https::proxy "https://myname:mypassword@myproxy.server.com:8080/";
    Acquire::ftp::proxy "ftp://myname:mypassword@myproxy.server.com:8080/";
    
    Note: if you want to download from server mirrors, edit the file /etc/apt/sources.list
    You may find the setting in the mirrors websites.
    for examples:
    deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted
    ...
    Don't forget to execute the following command:
    # apt-get update
        
    
Ubuntu wget proxy settings
    Add the following lines in the file:  ~/.wgetrc
    
    http_proxy = myproxy.server.com:8080
    https_proxy = myproxy.server.com:8080
    ftp_proxy = myproxy.server.com:8080
    proxy_user = myname
    proxy_passwd = mypassword
    
Ubuntu curl proxy settings
    Many Unix programs respect the http_proxy environment variable, curl included.    
    
    export http_proxy http://myname:mypassowrd@myproxy.server.com:8080
    export https_proxy http://myname:mypassowrd@myproxy.server.com:8080
    ...
    
    Or you may save the settings in the file ~/.bashrc
        
    Curl also allows you to set your file ~/.curlrc, which you might consider more permanet:
    http_proxy=http://myname:mypassowrd@myproxy.server.com:8080
    http_proxy=http://myname:mypassowrd@myproxy.server.com:8080
    
    
CentOS curl proxy settings
    Add the following lines in the file: /etc/profile
    
    export http_proxy=http://myname:mypassword@myproxy.server.com:8080
    export https_proxy=http://myname:mypassword@myproxy.server.com:8080
    export ftp_proxy=http://myname:mypassword@myproxy.server.com:8080
    export no_proxy=127.0.0.1,localhost,.localserver.com
    
CentOS yum proxy settings
    Add the following lines in the file /etc/yum.conf
    
    proxy=http://myproxy.server.com:8080
    proxy=https://myproxy.server.com:8080
    proxy=ftp://myproxy.server.com:8080
    proxy_name=myname
    proxy_password=mypassword
    
CentOS wget proxy settings
    Add the following lines in the file: /etc/wgetrc (note: the file has no "." prefix )
    
    http_proxy=myproxy.server.com:8080
    https_proxy=myproxy.server.com:8080
    ftp_proxy=myproxy.server.com:8080
    proxy_user=myname
    proxy_password=mypassword
    
    
SUSE proxy settings
    Add or change the following lines in the file: /etc/sysconfig/proxy
    
    PROXY_ENABLED="yes"
    HTTP_PROXY="http://myname:mypassword@myproxy.server.com:8080"
    ...
    
    then logout, then login, you may confirm the settings by the following commands:
    #curl www.google.com
    #wget www.google.com
    
    
--------------------------------- no_proxy -----------------------------------------------    
https://unix.stackexchange.com/questions/23452/set-a-network-range-in-the-no-proxy-environment-variable

no_proxy: This variable should contain a comma-separated list of domain extensions proxy should not be used for.
The no_proxy environment variable lists the domain suffixes, not the prefixes.

So for IPs, you have two options:
1) Add each IP in full:
printf -v no_proxy '%s,' 10.1.{1..255}.{1..255};
export no_proxy="${no_proxy%,}";

2) Rename wget to wget-original and write a wrapper script (called wget) that looks up the IP for the given URL's host, 
and determines if it should use the proxy or not:

#!/bin/bash
ip='';
for arg; do
   # parse arg; if it's a URL, determine the IP address
done;
if [[ "$ip" =~ ^10\.1\. ]]; then
   wget-original --no-proxy "$@";
else
   wget-original "$@";
fi;

Other methods:
    #1
    So the variable "no_proxy" should contain a list of domains, not IP ranges. 
    You'll need to set up proper local aliases for your local machines in /etc/hosts file(s).

    #2
    Here's a slightly simpler (one-line) approach based on janmoesen's solution.

    export no_proxy=`echo 10.1.1.{1..255} | sed 's/ /,/g'`

    Unfortunately, sed chokes on all the arguments passed from the expansion of 10.1.{1..255}.{1..255}, 
    either in his code or mine. So if you really need to expand to 256 * 256 IP addresses, you'll need 
    a different approach, but if you merely need 256 or so, this should work perfectly for you.


    #3
    Not exactly a correct solution but it might solve the problem for you. 
    If you assume that accessing anything from the outside of the proxy will be using DNS-names and 
    not directly using IP-addresses, you can set it like:

    export no_proxy=0,1,2,3,4,5,6,7,8,9
    As far as I know, no top domain ends with a number so if it does, it must be an IP-address.


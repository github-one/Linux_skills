More information:
http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html                                         # simple introduction for newbie
https://hijiangtao.github.io/2018/04/17/Docker-in-Action/                                           # simple introduction for newbie
https://blog.csdn.net/zmx729618/article/details/72930474                                            # introduction in Chinese
https://www.infoq.cn/article/docker-network-and-pipework-open-source-explanation-practice           # docker network

----------------------------------------------  Docker Conceptions ----------------------------------------------------------------
Images Default Command:
    Docker不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。
    Dockerfile中的CMD 指令就是用于指定默认的容器主进程的启动命令的。
    例1: ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。
    在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，
    输出了系统版本信息。
    例2：alpine 镜像默认的CMD是 /bin/sh
    You can check the default command by "$ docker history <images_name>"

前台和后台执行问题：
    提到CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。
    Docker不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，
    ===容器内没有后台服务的概念===

Running a Service in a Docker:
    一些初学者将 CMD 写为：
    CMD service nginx start
    然后发现容器执行后就立即退出了。甚至在容器内去使用systemctl命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，
    没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。
    对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是
    它需要关心的东西。
    而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为
    CMD [ "sh", "-c", "service nginx start"]，因此主进程实际上是 sh。那么当 service nginx start 命令结束后，sh 也就结束了，
    sh 作为主进程退出了，自然就会令容器退出。

    正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：
    CMD ["nginx", "-g", "daemon off;"]
    说明：可以通过"$ docker history nginx"查看到官方nginx镜像的默认命令就是这个。


----------------------------------------------  Docker Operations ----------------------------------------------------------------
docker Commands:
    attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像
    build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像
    commit    Create a new image from a container's changes # 提交当前容器为新的镜像
    cp        Copy files/folders from the containers filesystem to the host path 
                                                            # 从容器中拷贝指定文件或者目录到宿主机中
    create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器
    diff      Inspect changes on a container's filesystem   # 查看 docker 容器变化
    events    Get real time events from the server          # 从 docker 服务获取容器实时事件
    exec      Run a command in an existing container        # 在已存在的容器上运行命令
    export    Stream the contents of a container as a tar archive   
                                                            # 导出容器的内容流作为一个 tar 归档文件[对应 import ]
    history   Show the history of an image                  # 展示一个镜像形成历史
    images    List images                                   # 列出系统当前镜像
    import    Create a new filesystem image from the contents of a tarball  
                                                            # 从tar包中的内容创建一个新的文件系统映像[对应 export]
    info      Display system-wide information               # 显示系统相关信息
    inspect   Return low-level information on a container   # 查看容器详细信息
    kill      Kill a running container                      # kill 指定 docker 容器
    load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]
    login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器
    logout    Log out from a Docker registry server         # 从当前 Docker registry 退出
    logs      Fetch the logs of a container                 # 输出当前容器日志信息
    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
                                                            # 查看映射端口对应的容器内部源端口
    pause     Pause all processes within a container        # 暂停容器
    ps        List containers                               # 列出容器列表
    pull      Pull an image or a repository from the docker registry server
                                                            # 从docker镜像源服务器拉取指定镜像或者库镜像
    push      Push an image or a repository to the docker registry server
                                                            # 推送指定镜像或者库镜像至docker源服务器
    restart   Restart a running container                   # 重启运行的容器
    rm        Remove one or more containers                 # 移除一个或者多个容器
    rmi       Remove one or more images                 
                                            # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]
    run       Run a command in a new container
                                                            # 创建一个新的容器并运行一个命令
    save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]
    search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像
    start     Start a stopped containers                    # 启动容器
    stop      Stop a running containers                     # 停止容器
    tag       Tag an image into a repository                # 给源中镜像打标签
    top       Lookup the running processes of a container   # 查看容器中运行的进程信息
    unpause   Unpause a paused container                    # 取消暂停容器
    version   Show the docker version information           # 查看 docker 版本号
    wait      Block until a container stops, then print its exit code   
                                                            # 截取容器停止时的退出状态值

docker Running
    $ docker container start            # start the container that has already exists.
    $ docker container run              # create a new container every time.
    $ docker container stop             # send SIGTERM signal, then send SIGKILL signal after a while.
    $ docker container kill             # send SIGKILL signal to the process at once.
    $ docker container logs             # look up the output of the container shell
    # docker container exec             # enter a running container
    $ docker container cp [containerID]:[/path/to/file] .
   
   
docker attach vs exec
    "docker attach" isn't for running an extra thing in a container, it's for attaching to the running process.
    "docker exec" is specifically for running new things in a already started container, be it a shell or some other process.
    (docker >= 1.3) If we use "docker attach", we can use only one instance of shell. So if we want open new terminal 
    with new instance of container's shell, we just need run "docker exec".   
    If the docker container was started using "/bin/bash" command, you can access it using "docker attach", if not then 
    you need to execute the command to create a bash instance inside the container using "docker exec".


docker Options
    -it
    这是两个参数，一个是 -i 表示交互式操作，一个是 -t 为终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。

    --rm
    Running containers with --rm flag is good for thoses containers that you use for very short while just to accomplish something, 
    e.g. , compile your application inside a container, or jsut testing something that it works, and then you know its a short lived
    container and you tell your Docker daemon that once its done running, erease everything related to it and save the disk space.
    
    By default a container's file system persists even after the container exits. This makes debugging a lot easier(since you can 
    inspect the final state) and you retain all your data by defualt. But if you are running short-term foreground processes, 
    these container file systems can really pile up. If instead you'd like Dokcer to automatically clean up the container and 
    remove the file system when the container exits, you can add the --rm flag.


Docker Network
    $ docker inspect <container_name_or_ID>
    $ docker inspect <container_name_or_ID> | grep '"IPAddress"' | head -n 1
    $ docker inspect -f "{{.NetworkSettings.IPAddress}}" <contain_name_or_ID>
    $ docker inspect -f '{{.NetworkSettings.IPAddress}}' $(docker ps -aq)
    
    $ cat /etc/hosts
    $ cat /etc/resolv.conf              # looking up the DNS configuration
    $ cat /etc/nsswitch.conf            # looking up the hosts name configuration
    
    $ ip addr show
    $ ip route show
    $ netstat -nr       # looking up the IP forwarding table
    $ iptables -L -v
    

----------------------------------------------  Docker FAQs ----------------------------------------------------------------
Q:  How to start a stopped Docker container with a different command?
    I would like to start a stopped Docker container with a different command, as the default command crashes - meaning 
    I can't start the container and then use 'docker exec'. 
    Basically I would like to start a shell so I can inspect the contents of the container.
    Luckily I created the container with the -it option!
    
A:  Find your stopped container id
    $ docker ps -a
    Commit the stopped container:
    This command saves modified container state into a new image user/test_image

    $ docker commit $CONTAINER_ID user/test_image
    Start/run with a different entry point:
    $ docker run -ti --entrypoint=sh user/test_image
    
    Note:
    Steps above just start a stopped container with the same filesystem state. That is great for a quick investigation. 
    But environment variables, network configuration, attached volumes and other staff is not inherited, you should 
    specify all these arguments explicitly.
    
    

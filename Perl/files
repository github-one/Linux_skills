
-X FILEHANDLE

    $str = "/some/file/location/";
    if ( -d $str ) {
        print "This is a directory.\n";
    }
    
    -r  File is readable by effective uid/gid.
    -w  File is writable by effective uid/gid.
    -x  File is executable by effective uid/gid.
    
    -e  File exists.
    -z  File has zero size (is empty).
    -s  File has nonzero size (returns size in bytes).

    -f  File is a plain file.
    -d  File is a directory.
    -l  File is a symbolic link (false if symlinks aren't supported by the file system).
    -p  File is a named pipe (FIFO), or Filehandle is a pipe.
    -S  File is a socket.
    -b  File is a block special file.
    -c  File is a character special file.
    -t  Filehandle is opened to a tty.

Directory and file operations
    $mydir = "/root/mypath/*";      # note: "/root/mypath" will get only one result.
    my @files = glob( $mydir );
    print join "\n", @files;        # note: the result is sorted.  
    
    opendir (DIR, "/root/mypath") or die "Error, $!";       # note: "/root/mypath" vs "/root/mypath/*"
    @files = readdir DIR;
    print join "\n", @fiels;        # note: the result is unsorted and includes hidden files.
    
    # List all the text files in the current directory.
    my @files = grep { -f and -T } glob '* .*"
    print "@files\n";
    Note: '*' matches all files but not '.xxx', while '.*' matches all files beginning with '.'


File::Find Simple Examples
    use File::Find;
    my $dir = "/root/mypath";
    find(sub { print if -d }, $dir);
    find(sub { print $FILE::Find::name if -d}, $dir);
    
File::Find Variables
    $_                      Current filename
    $File::Find::dir        Current diretory name
    $File::Find::name       Full path of current filename(i.e., $File::Find::dir/$_)
    
File::Find Example 1    
    # print the 10 largest files found in the tree under the directory
    #---------------------------------------------------------------------------
    #!/usr/bin/perl -w
    
    ($#ARGV == 0) or die "Usage: $0 [directory]\n";
    
    use File::Find;
    
    find(sub { -l && return; $size{$File::Find::name} = -s if -f;}, @ARGV);
    @sorted = sort {$size{$b} <=> $size{$a}} keys %size;
    
    splice @sorted, 10 if @sorted > 10;
    
    foreach (@sorted)
    {        
        printf "%10d %s\n", $size{$_}, $_;
    } 
    #---------------------------------------------------------------------------
        
        
File::Find Example 2
    #---------------------------------------------------------------------------
    use File::Find;
    use Cwd;
    
    my $current_dir     = getcwd;
    my @files_found     = ();
    my $file_pattern    = '*.c';
    find( sub { push @files_found, $File::Find::name, 
                      if( m/^(.*)$file_pattern$/ ) }, $current_dir);
    print join( "\n", @files_found );                    
    #---------------------------------------------------------------------------

File::Find preprocess and postprocess
    #---------------------------------------------------------------------------
    my ($min_depth, $max_depth) = (2,3);
    
    find( { 
            preprocess  => \&preprocess,
            wanted      => \&wanted,
          }, 
          @dir);
    sub preprocess {
        my $depth = $File::Find::dir =~ tr[/][];
        return @_ if $depth < $max_depth;
        return grep { not -d } @_ if $depth == $max_depth;
        return;
    }
    sub wanted {
        my $depth = $File::Find::dir =~ tr[/][];
        return if $depth < $min_depth;
        print;
    }       
    #---------------------------------------------------------------------------
    Note: If you are traversing a very big tree, the biggest problem here is that even if you only want the files 
    at depth 2-3, find() will happily descend down to level 15, giving wanted all the directories and files it 
    encounters en route.    
     

File::Basename;
    use File::Basename;
    my $file_name = "/dir1/dir2/some.pl";
    my ($name, $path, $suffix) = fileparse($file_name, '\.[^\.]*');
    print $name, "\n";
    
    my @files = qw(file.txt file.zip file.pl);
    my @exts = qw(.txt .pl .zip);
    for my $file (@files) {
        my ($name, $dir, $suffix) = parsefile( $file, @exts );
        print $name, " ", $dir, " ", $suffix, "\n";
        }
        
     
File::Find::Rule Examples
    #---------------------------------------------------------------------------
    use File::Find::Rule;
    my $dir = "/root/mypath";
    for my $file (File::Find::Rule->in($dir)) {
        print $file . "\n";
    }
    
    #---------------------------------------------------------------------------
    use File::Find::Rule;
    # find all the subdirectories of a gvie directory
    my @subdir = File::Find::Rule->directory->( $directory );
    
    #---------------------------------------------------------------------------
    # find all the .pm files in @INC
    my @files = File::Find::Rule->file()
                                ->name( '*.pm' )
                                ->in( @INC );
    
    #---------------------------------------------------------------------------
    # find all the .pm file in @INC, but without method chaining
    my $rule = File::Find::Rule-new;
    $rule->file;
    $rule->name( '*.pm' );
    my @files = $rule-in( @INC );
    
    
File path separator
    Different Operating Systems sue different characters as their path separator:
    foo/bar/baz     # *nix
    foo\bar\baz     # Windows
    foo:bar:baz     # Mac OS 9
    foo/bar/baz     # Mac OS X
    
    In Perl you can generally just use a '/' as your path separtor( except on MAC OS 9 ?) because Perl will automagically convert 
    the '/' to the correct path separator for the system it is running on.
    
   
Lexical filehandle or typeglob
    Lexical filehandles are a better practice for a variety of reasons.
        open my $fh, '<', 'filename' or die $!;
    Note: You must "use IO::File;" in 5.10 to enalbe this and "use IO::Handle;" in 5.10 and earlier.

    Lexical filehandles can be passed easily as arguments, filehandles cannot, typeglobs can (or at least references to them can),
    but that's kinda messy.
    
    With the benefit of explicit scoping, lexical filehandles allow you to manage the lifespan of filehandles as a feature of
    Perl 5's memory management.
        say 'file not open';
        {
            open my $fh, '>', 'inner_scope.txt';
            $fh->say( 'file open here' );
        }
        say 'file closed here';
    Perl 5 uses a memory management technique known as reference counting. Every Perl value has a counter attached.
    Perl increases this counter every time something takes a reference to the value, whether implicitly or explicitly.
    Perl decreases that counter every time a reference goes awy. When the counter reaches zero, Perl can saftely recycle
    that value.
    Within the inner block in the example, when the filehandle's reference count reaches zero at the end of the block, 
    Perl recycles it to reclaim memory and calls close() implicitly.
    
    OLDER code may take references to typeglobs.
        local *FH;
        open FH, "> $file" or die "Can't wirte '$file': $!";
        my $fh = \*FH;
    This idiom predates lexical filehandles(introduced with Perl 5.6.0 in March 2000).               
          
    

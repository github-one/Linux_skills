$#ARGV
    The special variable $#array tells you the index of the last element of an array(that means n-1).
    If you pass 0 arguments, $#ARGV will be -1, since there are no elements in the array.
    If you pass 1 argument, $#ARGV will be 0.
    
    $perl -E 'say for @ARGV' file1 file2
    file1
    file2
    
    Be careful if your arguments start with a hyphen, e.g. the -file1 and -file2. Perl will take it as an option.
    $perl -E 'say for @ARGV' -file1 -file2
    -i used with no filenames on th command line, reading from STDIN.
    They look like option(to both Perl and humans). Seperate options and other(non-option)arguments with '--'
    $perl -E 'say for @ARGV' -- -file1 -file2
    -file1
    -file2
    
$0 and @ARGV
    The name of the program being executed is always in the $0 variable of Perl. (but $1, $2, etc are note related)
    
    C prgrogram: the name of the program being executed is in argv[0], the number of arguments is argc.
    
    Unix/Linux shell program: $0 is the name of the script being executed. $1, $2, etc. hold the rest of the commmand
    line parameters.
    
    Extract the command line argumets from @ARGV
    my ($name, $number) = @ARGV;
    if (not defined $name) { die "Nedd name\n" }
    ...
    
    my $filename = shift or die "usage: $0 FILENAME\n";
    # There is on minor bug in the above code. If the user supplies '0' as the name of the file. 
    But it doesn't matter, since we can live with the fact. 
    
    
Regular expression for the commmand line    
    while (@ARGV && ($_ = $ARGV[0]) =~ /^-(.)(.*)/) { ... }
    # This regex will match things like "-a", "-abc", but it won't match "--xzy" or "abc".
    
    my (@witharg)   = ($args =~ /(\S)\s*:/g);
    my (@rest)      = ($args =~ /([^\s:])(?!\s*:)/g);
    
    #If $args ='a:b :cde: +:-', the @witharg will be ('a','b','e','+'), the @rest will be ('c','d','-').
    #The group (?!\s*:) is a zero-width negative look-ahead assertion.
    
    
Getopt::Long
    "Long" is relatvie here, it just means more than one character.
    
    Types of the command line arguments:
        -Long name with values
        -Long name without value: We would accept flags by their mere existence.
        -Short name(or single-character names) with values
        -Short name without value
        -combining short names, -vd should be understood as -v -d. The difference here is that "long names"
            start with double-dash "--" while short names, even if several of them were combined together
            start with a single dash "-".
        - Non-affiliated values, values without any name starting with a dash in front of them.

    ##################  test.pl #############################################################
    #!/usr/bin/perl
    use strict;
    use 5.010;
    use Getopt::Long qw(GetOptions);
    
    my ($trace, $machine) = (0);
    GetOptions(
            'machine'             => \$machine,
            'trace=i'             => \$trace,
    ) or die "Usage: $0 [--trace NUMBER] [--machine NAME]\n";

    if (defined $machine) {
            say $machine;
    } else {
            say 'undef';
    }
    say $trace;
    say join ", ", $0, @ARGV;   
    ##########################################################################################
    
    Input and output (note: "/" stands for a new line)
        perl test.pl                            =>  undef/0/test.pl
        perl test.pl --machine                  =>  1/0/test.pl
        perl test.pl --machine --trace 3        =>  1/3/test.pl
        perl test.pl --machine --trace          =>  Option trace requires an argument/Usage: ...
        perl test.pl --ma --tr 3                =>  1/3/test.pl
        perl test.pl --m --t 3                  =>  1/3/test.pl
        perl test.pl --M --T 3                  =>  1/3/test.pl
        perl test.pl --Ma --tR 3                =>  1/3/test.pl
        perl test.pl -m -t 3                    =>  1/3/test.pl
        perl test.pl -m -tr 3                   =>  1/3/test.pl
        perl test.pl -tr 3 -m                   =>  1/3/test.pl
        perl test.pl -m --tr 3                  =>  1/3/test.pl
        perl test.pl -m --tr=3                  =>  1/3/test.pl
        perl test.pl -m -t=3                    =>  1/3/test.pl
        
        perl test.pl -mt 3                      =>  Unknown option: mt/Usage: ...
        perl test.pl -mt3                       =>  Unknown option: mt3/Usage: ...
        perl test.pl -m -t3                     =>  Unknown option: t3/Usage: ...

        perl test.pl -m -t 3 hello              =>  1/3/test.pl, hello
        perl test.pl -m -t 3 one two            =>  1/3/test.pl, one, two
        perl test.pl -m one two -t 3            =>  1/3/test.pl, one, two        
        perl test.pl -m -one                    =>  Unknown option: o/.../.../Usage: ...
        perl test.pl -m -- -one                 =>  1/0/test.pl, -one        
        
        Note1: --machine or -m flag will set $machine value to "true".
        Note2: In the default configuration, options names may be abbreviated to uniqueness, case does not matter,
        and a single dash is sufficient, even for long options names. Also, options may be placed between
        non-option arguments.
        Note3: A double dash "--" will stop Getopt::Long from processing further arguments.

GetOptions()
    The call to GetOptions() parses the command line arguments that are present in @ARGV and set the option
    value to the value "1" if the option did occur on the command line. Otherwise, the option vairable is 
    NOT touched.
        
Non-affiliated values
    The GetOptions function only handles the parameters that start with a dash and their corresponding values,
    when they are relevant. Once it processed the options it will remove them from @ARGV. (Both the option name
    and the option value will be removed.) Any other, non-affiliated values on the command line will stay
    in @ARGV. 
        
Single-character and bundling feature
    ##################  test.pl #############################################################
    ...
    Getopt::Long::Configure("bundling");
    ...        
    GetOptions(
            'machine|m'             => \$machine,
            'trace|t=i'             => \$trace,
    ) or ...
    ...
    ##########################################################################################        
        
    Input and output (note: "/" stands for a new line)
        perl test.pl --m --t 3                  =>  1/3/test.pl  
        perl test.pl -m -t 3                    =>  1/3/test.pl
        perl test.pl -m -t3                     =>  1/3/test.pl
        perl test.pl -mt3                       =>  1/3/test.pl
        perl test.pl -mt 3                      =>  1/3/test.pl
        
        perl test.pl -m -t=3                    =>  Unknown option: =/Unknown option: 3/Usage: ...
        perl test.pl -mt                        =>  Option t requires an argument/Usage: ...
        perl test.pl -mtr                       =>  Value "r" invalid for option t (number expected)/Usage: ...
        
        
Negatable boolean arguments
    Negatable boolean argument is the exclamation mark "!" at the end of the flag.
    
    my $verbose;
    GetOptions( 'verbose!' => \$verbose);
    
    Input and output
        (none input)    =>      $verbose is undef
        --verbose       =>      $verbose is 1
        --noverbose     =>      $verbose is 0
        --nove          =>      $verbose is 0
        --nov           =>      $verbose is 0
        -noverbose      =>      error
        --nov --ver     =>      $verbose is 1

Optional value
    Using :s at the end of the option name.
    GetOptions( 'logfile:s' => \$logfile);
    # $logfile will take a value only when the value for 'logfile' is present.
    
    # In the case of optional values, if no suitable is supplied, string valued options get en empty string ''
    assigned, while number options are set to '0'.


Options with multiple values
    Input:   --library lib/stdlib   --library lib/extlib   
    GetOptions ('library=s"   => \@libfiles);  # @libfiles would coontain two strings "lib/stdlib" and "lib/extlib"
    GetOptions ('library=s@"  => \$libfiles);  # @$libfiles would contain two strings "lib/stdlib" and "lib/extlib"

    Often it is usefull to allow comman-separated lists of values as well as multiple occurances of the options.
    This is easy using Perl's split() and join() operations:
        GetOptions ("library=s"  => \@libfiles);
        @libfiles = split (/,/, join (',', @libfiles)); 
        
    Input:   --coordinates 52.2 16.4 --rgbcolor 255 255 149
    GetOption ("coordinates=f{2}' => \@coor, 'rgbcolor=i{3}' => \@color);
    
Options with hash values
    Input:   --define os=linux --define vendor=redhat
    GetOptions ("define=s" => \%defines);
    GetOptions ("define=s%" => \$defines);
    
    # The hash %defines (or %$defines) will contain two keys, "os" with value "linux" and "vendor" with value "redhat".
    # The key are always taken to be strings.
    

Options with multiple names
    Often it is friendly to supply alternate mnemonic names for options.
    GetOptions ('length|height=f' => \$length);
    The first name is called the primary name, the other names( a list of alternative names) are called aliases. 
    When using a hash to store options, the key will always be the primary name.
    
    
The lonesome dash "-"
    Normally GetOptions will ignore the lone dash "-" on the command line and it will be left in @ARGV.
    
    GetOptions ('' => \$Stdio);
    Now a lone dash will now be a legal option and using it will set variable $stdio.    
    
Shells and the command line
    The command line is not split by GetOptions, but by the commmand line interpreter(CLI).
    On Unix/Linux, this is shell. On Windows, it is COMMAND.COM or COMMMAND.EXE.
    In Unix/Linux, you can use single quote and double quote to group words together.
        "tow words"
        'two words'
        two\ words    
    
Option specification and destination
    The option name as specified to the GetOptions() function is called option specification. The reference
    to the variable is called the option destination.
    
    You do not need to specified the option destination. If no destination is specified, GetOptions will define
    variables $opt_xxx where xxx is the name of the option. GetOptions will also accept a reference
    to a hash as its first argument and deliver the option values there.


Parsing options from an arbitrary array or string
    use Getop::Long qw(GetOptionsFromArray);
    $ret = GetOptionsFromArray (\@myopts, ...);           # the @ARGV is not touched at all.
    
    use Getopt::Long qw(GetOptionsFromString);
    $ret = GetOptionsFromString ($string, ...);
    
    $ret = GetOptionsFromString ($string, ...);
    # When GetOptionsFromString is called in list context, return both the return status and an array reference to
    # any remaining arguments.
    # Note: this is useful when you have a configuration file to parse on.


Subroutine for option
    GetOptions ("foo=i" => \$handler);
    sub handler {
        my ($opt_name, $opt_value) = @_;
        print "Option name is $opt_name and value is $opt_value.\n";
    }
    
    Input and output
        perl test.pl --opt 3        => Option name is opt and value is 3.

    GetOptions ('x=i' => \$x, '<>' => \&sub_proc);
    # Here '<>' is a special option to be used to connect a subroutine to handle non-option arguments.
    # When you execute this program with command line arguments '-x 1 foo -x 2 bar', this will call subroutine
    # 'sub_proc' with argument 'foo' (and $x equal to 1), and then call 'sub_proc' with argument 'bar' (and $x
    # equal to 2).
     

Storing options values in a hash
    A hash must be passed as the first argument to GetOptions().
    
    my $hash = ();
    GetOptions (\%hash, 'foo=i', 'bar=i');      # values will be stored in $hash{foo}, $hash{bar}
    GetOptions (\%hash, 'foo=i@");              # values will be strore in @{$hash{foo}}
    
    The hash may contain reference to the actual destination, for example
    my $len  = 0;
    my $hash = ('length' => \$len);
    GetOptions (\%hash, 'length=i');            # value will be stored in $len.
    
    The most frequently used options could be stored in variables while all other options get stored in the hash.
    my ($verbose, $debug) = (0, 0);                                 # frequently referenced
    my %hash = ('verbose' => \$verbose, 'debug' => \$debug);            
    GetOptions (\%hash, 'verbose', 'debug', 'filter', 'size=i'); 
    if ($verbose) {...}
    if (exists $hash{filter}) { ... }
    
      
summary of option expressions
    GetOptions ('foo' => \$foo_value);
    GetOptions ('foo|bar' => \$foo_value);          # The first name is called the primary name, the other called alias.
    GetOptions ('foo=s' => \$foo_string_value);   
    GetOptions ('foo:s' => \$foo_string_value);     # optional value
    GetOptions ('foo=f' => \$foo_float_value);
    GetOptions ('foo=i' => \$foo_integer_value);
    GetOptions ('foo=o' => \$foo_INTEGER_value);    # +10, -5, 037(Ooctal), 0xf3(hexadecimal), 0b01101(binary)
    GetOptions ('foo!' => \$foo_value);
    GetOptions ('foo+' => \$foo_value);             # an incremental option is specified with a plus "+"
    GetOptions ('f|foo' => \$foo_value);
    GetOptions ('foo|f' => \$foo_value);
    GetOptions ('foo=i' => \@foo_value);
    GetOptions ('foo=i{3}' => \@foo_value);         # exactly take three values
    GetOptions ('foo=i{2,4}' => \@foo_value);       # take at least two and at most four values
    GetOptions ('foo=i{1,}' => \@foo_value);        # take one or more values
    GetOptions ('foo=i{,}' => \@foo_value);         # take zero or more values
    GetOptions ('foo=i' => \%foo_value);
    GetOptions ('foo=i@' => \$foo_value);
    GetOptions ('foo=i%' => \$foo_value);           # the key are always taken to be string.
    GetOptions ('foo' => \$foo_value, '<>' => \$sub_proc);
    GetOptions ('verbose' => \$verbose, 'quiet' => sub { $verbbose=0 });
    GetOptions ('' => \$Stdio);                     #  a lone dash '-' will set variable $stdio.     
    GetOptions (\%hash, 'foo=i', 'bar=i');          # values will be stored in $hash{foo}, $hash{bar}
    GetOptions ("help|?" => \$help);                # -?, -help, --help will set $help to value "1"
    
        


Q:  WHY?
    When the inner subroutine is called, it will probably see the value of the outer subroutine's
    variable as it was before and during the *first* call to the outer subroutine;
    in this case, after the first call to the outer subroutine is complete, the inner and outer subroutines
    will no longer share a common value for the variable. In other words, the vairable will no longer be shared.

    Furthermore, if the outer subroutine is anonymous and references a lexical variable outside itself, then
    the outer and inner subroutine will never share the given variable.

    This problem can usually be solved by making the inner subroutine anonymous, using the sub {} syntax.
    When inner anonymous subs that reference variables in outer subroutines are called or referenced,
    they are automatically rebound to the current values of such variables.



Q: what do the followings mean?
    @array[...]
    @hash{...}
    
A: 
    @array[...] is array silce operation.
    
    
-----------------------------------------  Solved Questions    -------------------------------------------------

Q: what will happen?
    my %hash = map (2,4), %array;
    my %hash = map (2,5,7), %array;
    my @b = map (2,4,7), @array;
         
A: Finnally, I found this is a silly question!
    my %hash = map (2,4), %arrar  
    equals:
    my %hahs = map (2,4);    # the comma ',' means the map function ends
    %array;   
    
    
references:    
https://stackoverflow.com/questions/21032709/why-does-perl-function-map-give-the-error-not-enough-arguments-for-map
https://stackoverflow.com/questions/23332271/perl-map-when-to-use-expr-vs-block-form

try:
    my $x = 0;
    %h = map $x = $x + $_, 5,6,7,8;
    %h = map +{a=>1}, (1..7);
 ------------------------------------------------------------------------------------------------------------   

https://perlmaven.com/traversing-a-directory-tree-finding-required-files

Traversing a directory tree, finding required files


I want to test files in a directory also sub directory in windows platform. 
Folder Structure is like this. Each folder has some .Pdf file. 
I have list of pdf file & i want to check whether it is available in a directory from dir1.

                                dir1
                                 |
                                 |
                  -----------------------------------------------
                  |           |            |         |          |
                 dir2        dir3         dir4      dir5       dir6
                  |                        |
                  |                        |
       ----------------------         -------------- 
       |                    |         |            |
     dir7                  dir8      dir9         dir10


The understanding

We can go in two main directions.
1. We can first create a list of files in the given directory structure and then compare that list with the list of expected file. 
This requires us to hold the list of the existing file in the memory, which can be an issue if the lists are bigger than the memory
of our computer.
2. For each expected file we can search in the directory tree. 
This approach requires only one file-name at a time in the memory, but will require us to traverse the directory structure 
for every file. It can take a lot of time, especially if there are a lot of expected files.

Let's see an implementation of the first solution. We'll use File::Find::Rule to traverse the file system and collect the filenames.

###########################################################################################
use strict;
use warnings;

use File::Find::Rule;
use File::Basename qw(basename);

my $path = "C:/Users/foobar/files/dir1";
my $report = 'final.txt';
my $expected = <STDIN>;
chomp $expected;

open(my $fh, '<', $expected) or die "Could not open '$expected' $!\n";
open(my $out, '>', $report) or die "Could not open '$report' $!\n";

my @full_pathes = File::Find::Rule->file->name('*.pdf')->in($path);
my @files = map { lc basename $_ } @full_pathes;
my %file = map { $_ => 1 } @files;

print $out "Below files do not exist in the Dir ($path):\n";
while (my $name = <$fh>) {
    chomp $name;
    if ($file{lc $name}) {
        print "$name found\n";
    } else {
        print $out "$name\n";
    }
}
close $out;
close $fh;

###########################################################################################
The File::Find::Rule->file->name('*.pdf')->in($path); call file list all the files, 
that match the wild-card *.pdf and can be found in the subdirectories of $path.

The only issue might be that on Windows the file names are case insensitive and I think 
the wild-card of File::Find::Rule is always case-sensitive. So the above code will 
only find file with .pdf extension, but not with .Pdf extension. 
The problem can easily be solved by writing: ->name('*.[pP][dD][fF]'). 
That will disregard case for all 3 letters.


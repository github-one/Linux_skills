Special Literals
    __FILE__        the current file
    __LINE__        the current line number
    __PACKAGE__     the current package
    __SUB__         A reference to the current subroutine, it's undefined if outside of a subroutine
                    __SUB__ only with a use 5.16 or use feature "current_sub""
    ^D              the logical end of the script
    ^Z              the logical end of the script
    __DATA__        the logical end of the script. Text after it may be read via the filehandle PACKNAME::DATA
    __END__         the logical end of the script. This behaves like __DATA__ but only in the top level script.
                    It can be accessible via main::DATA
                       

caller
    print __PACKAGE__, ' called from ', (caller)[1], ".\n";    
    
    ( $package, $filename, $line ) = caller;
    

__PACKAGE__ is the name of the current package;

use base
    use base somemoudle;  
    vs 
    use somemoudle;
    The first has only one more expression: push @IAS, qw(somemoudle);
    
    use Foo ();
    vs 
    use Foo;
    The latter will automatically call import subroutine. The 
    

File locking
    On Unix-like operating systems, such as Linux and OSX, we can use the native file locking mechanism 
    via the flock function of Perl.
    
    use strict;
    use warnings;
    use Fcntl qw(:flock SEEK_END);

    my $file = 'counter.txt';
    my $count = 0;


    if (open my $fh, '+<', $file) {
        flock($fh, LOCK_EX) or die "Cannot lock mailbox - $!\n";
        $count = <$fh>;
        $count++;
        print "$count\n";
        seek $fh, 0, 0;
        truncate $fh, 0;
        print $fh $count;
        close $fh;                  # close the file and by that free the lock
    }
   

while( my $row = <$fh> ) mysteries
    while (my $row = <$fh>) {
      chomp $row;
      print "$row\n";
    }
    Every time we reach the condition of the while loop, first it will execute my $row = <$fh>, the part 
    that will read the next line from the file. If that line has anything in it, that will evaluate to true. 
    Even empty lines have a newline at the end, so when we read them, the $row variable will contain a \n 
    that will evaluate to true in boolean context.

    After we read the last line, in the next iteration the readline operator (<$fh>) will return undef which is false. 
    The while-loop will terminate.

    An edge-case
    There is an edge-case though when the very last line has a single 0 in it, without a trailing newline. 
    The above code would evaluate that line to false and the loop would not be executed. Fortunately, 
    Perl is actually cheating here. In this very specific case (reading a line from a file within a while-loop), 
    perl will actually act as if you wrote while (defined my $row = <$fh>) { and so even such lines will execute properly.



Nested subroutines(1)
    From perlref-> Function Templates
    Generally said, named subroutines do not nest properly and should only be declared in the main package scope.

    This is because named subroutines are created at compile time so their lexical variables get assigned 
    to the parent lexicals from the first execution of the parent block. 
    If a parent scope is entered a second time, its lexicals are created again, while the nested subs still reference the old ones.

    Anonymous subroutines get to capture each time you execute the sub operator, as they are created on the fly. 
    If you are accustomed to using nested subroutines in other programming languages with their own private variables, 
    you'll have to work at it a bit in Perl. The intuitive coding of this type of thing incurs mysterious warnings 
    about "will not stay shared" due to the reasons explained above.
    
    This has the interesting effect of creating a function local to another function, something not normally supported in Perl.

Nested subroutines(2)
    Subroutines are stored in a global namespace at compile time. In this example b(); is short hand for main::b();. 
    To limit visibility of a function to a scope you need to assign an anonymous subroutines to a variable.    
    sub a { 
       sub b { print "In B\n"; }
    }
    b();

    Both named and anonymous subroutines can form closures, but since named subroutines are 
    only compiled once if you nest them they don't behave as many people expect.
    ----------------------------------------------------------------------------------------
            Nesting named subroutines is allowed in Perl 
            BUT
            it's almost certainly a sign that the code is doing someting incorrectly.
    ----------------------------------------------------------------------------------------
    use warnings;
    sub one {
        my $var = shift;
        sub two {
            print "var: $var\n";
        }
    }
    one("test");
    two();
    one("fail");
    two();
    __END__
    output:
    Variable "$var" will not stay shared at -e line 5.
    var: test
    var: test


Named subroutines and anonymous subroutines
    "A subroutine doesn't have to be an anonymous subroutine to be a closure. If a named subroutine accesses 
    lexical variables and those variables go out of scope, the named subroutine retains a reference to 
    the lexicals, just as you saw with anonymous subroutines."
            ---------From (2003)Alpaca book, learning of closures, page 73

Warning: "Variable $dom will not stay shared"
    sub outerSub {
          my $dom = someBigDOM;
          ...
          my $otherVar = innerSub();
          return $otherVar;

          sub innerSub {
            my $resultVar = doStuffWith($dom);
            return $resultVar;
          }
    }
    
    All the variables are originally preallocated, and innerSub and outerSub share the same $dom. 
    When you leave a scope, perl goes through the lexical variables that were declared in the scope 
    and reinitializes them. So at the point that the first call to outerSub is completed, it gets a new $dom. 
    Because named subs are global things, though, innerSub isn't affected by this, and keeps referring to 
    the old $dom. So if outerSub is called a second time, its $dom and innerSub's $dom are in fact separate variables.

    So either moving the declaration out of outerSub or using an anonymous sub (which gets freshly bound to 
    the lexical environment at runtime) fixed the problem.        

    You can fix this by doing this:
    {
        my $dom;
        sub outerSub {
            $dom = ...
            ... innerSub() ...
        }
        sub innerSub {
            ...
        }
    }
    or
    sub outerSub {
        my $dom = ...
        *innerSub = sub {
            ...
        };
        ... innerSub() ...
    }    
    or
    sub outerSub {
        my $dom = ...
        my $innerSub = sub {
            ...
        };
        ... $innerSub->() ...
    }    


Subroutine Parameters
    perlsub: The array @_ is a local array, but its elements are alias for the actual scalar parameter.
    In Particular, if an element $_[0] is updated, the corresponding argument is updated (or an error
    occurs if it is not possible to update)... So yes, they are passed as "copy", but internally still
    as ref. The copy only takes place once you shfit them out of @_. That's is why it's possible to change
    the original variable inside the subroutine by using @_[0] = ...
    

anonymous subroutines
    my $add_ref = sub {
        my ($x, $y) = @_;
        return $x+$y;
        };                              # note ';'
    print &{ $add_ref }(2, 3), "\n";
    print $add_ref->(2, 3), "\n";
    print &$add_ref(2,3), "\n";
    
    sub greet {  print "hello \n"; }
    $rs = \&greet; # Create a reference to subroutine greet
    
    sub foo { print "foo called\n" }
    $rs = "foo"; 
    &$rs();  # prints "foo called"

comment multiple line
    =begin comment

    my code ...
    
    =end comment

    =cut


Use of defined/undef
    sub MyFunc {
        my $first  = shift;
        my $second = shift // 'default value';
        # Do your stuff here.
        }
    
    my $optional = shift;
    $optional = defined $optional ? $optional : 'Default value';
    
    my $optional = defined( $_[0] ) ? shift : 'Default value';


defined-or operator //=
    my $value;    
    $value ||= "some";      # the same: $value = $value || "some";
    $value = 0;
    $value ||= "some";      # $value is 'some'
    
    use 5.010;
    my $value = 0;
    $value = $value // 1;   # $value is 0;
    $vluae //= 1;           # $value is 0;    


What does that mean?  0.0..10_000
    Underscores are ignored. You can put them in to make them more readable.
    

Parans, square brackets and curly braces
    From: https://stackoverflow.com/questions/16153618/rules-of-parens-brackets-usage-in-perl
    In Perl, brackets, braces and parens all have multiple meanings, but curly braces probably have the most.

    Parens
        - Sort out precedence 2 * 3 + 4 vs. 2 * (3 + 4).
            > Delimiting argument lists for functions is a subcase of this: 
                    join "", 1, 2, 3 vs. join("", 1, 2), 3
            > Surround argument list of method call with arrow operator: 
                    $foo->bar(1, 2) (not needed for empty arglist)
        - Force interpretation of the previous bareword as a subroutine call. Compare Foo->new and Foo()->new.
        - Invoke coderefs with arrow operator: $code->()
        - Subroutine prototypes sub foo ($$;$%) { ... }
    Square Brackets
        - Array subscript operator my @array = 1 .. 5; $array[1]
        - Arrayref literals my $aref = [1 .. 5]
    Curly braces
        - Blocks (for do, sub, map, grep, conditionals, looping constructs, bare blocks, labeled blocks, ... )
        - Hash subscript operator $hash{foo}
        - Hashref literal my $hashref = { a => 3, b => 2 }
        - Dative block print { $filehandles[5] } "Hello world"
        - Circumfix dereference operators @{ $aref }, %{ $hashref }, ...
        - package blocks package Foo { ... }
     
     … and nearly all characters can be used as delimiters for quote-like operators 
        q//, qq//, qr//, qx//, m//, s///, tr///, y///, leading to interesting stuff like s(foo){bar}g



|| assignment
    In Perl, you can use the ||= operator. Its precedence rules are such that it’ll only do an assignment if the value is false 
    (‘false’ generally means zero, undefined, or the empty string):
    $a ||= 5;
    $a = $a || 5;           # another way
    $a = 5 unless $a;       # another way


Difference b/w undef and empty string
    An empty string, is a string defined to be empty. It is defined. Creating a scalar variable without assigning it anything 
    or assigning it the special symbol undef are two ways of saying "I haven't chosen a value yet. Act accordingly."
        my $a;                      defined($a); returns false.
        my $a=undef;                defined($a); returns false.
        my $a='';                   defined($a); returns true.
        my $a="";                   defined($a); returns true.
        my $a=1; $a=undef;          defined($a); returns false.
        print 3 + undef;            # 3
        print "hello" . undef       # hello
        $a=undef;  print $b=()=(9,15,$a);         # 3  


Length function on an undefined value
    In Perl 5.12, it's a bit easier because length on an undefined value also returns undefined. 
    That doesn't issue a warning, which is the reason this question exists.

    use 5.012;
    use warnings;

    my $name;

    if( length $name ) { # no warning
        ...
        }



goatse operator "  = () =  "
    my $str = "here are some words";
    my $count = () = $str =~ /\S+/g;

    The "empty parentheses" idiom is one that is used to force list context on an expression, 
    and yet return a scalar: the count of items in that list.


Baby cart sign @{[ ]}
    Discovered by Larry Wall, 1994. (Alternate nicknames: "shopping-trolley", "pram", "turtle")
        print "sorted array: @{[ sort keys %hash ]} \n";
    
    Another use case is for breaking aliasing (i.e. make a copy); for example to 
    avoid the Modification of a read-only value attempted fatal error when running such code:
        for (qw( 1 2 3 )) {
            $_ = $_ * $_;    # contrived, error!
            print "square: $_\n";
        }
    With the babycart, the topic is an actually modifiable copied scalar.
        for ( @{[ qw( 1 2 3 ) ]} ) {
            $_ = $_ * $_;    # contrived, OK!
            print "square: $_\n";
        }


Schwartzian transform
    It is a technique used to improve the efficency of sorting a list of items. The idiom is named after Randal L. Schwartz,
    who first demonstrated it in Perl 5 in 1994. It has been later adpoted by other languages such as Python, Ruby, PHP, etc.
    The term "Schwartzian transform" indicates a specific idiom, and not the algorithm in general.
    [ See "Schwartzian transform" in Wikipedia ]

'$::foo' and '@::foo'
    They are shorthand for '$main::foo' and '@main::foo'.
    
    The default namespace, main, is an alias for the root namespace.
    Most "global" variables are actually package-globals, meaning they are global within package in which
    they are defined. In modern Perl, these vairiables are typically accessed in other packages via suitable
    our declarations, bute the older mechanism of use vars is still available.    
    

Dummy placeholder
    our ( undef, $min, $hour ) = localtime;


our 
    our makes a lexical alias to a package variable of the same name in the current package for use within
    the current lixical scope.
    Notes:
    [1] It only valid wthin a lexical scope.
    [2] It only reates an alias to an existing varaibles ( a package variable of the same name )
    [3] It works even if the pacakge variable has not been used before, as package varaibles sprint into
    existence when first used.
    [4] Multiple our declarations with the same name in the same lexical scope are allowd if they are
    in different packages. If they are in the smae package, Perl will emit warnings as the second is 
    merely redundant.
    ---------------------------------------------------------
    package Foo;
    use strict;
    
    $Foo::foo = 23;
    {
        our $foo;       # Alias to $Foo::foo
        print $foo;     # Prints 23
    }
    print $Foo:foo;     # Prints 23
    print $foo;         # ERROR: requires explicit package name
    ---------------------------------------------------------


"our" vs "use vars"
    use vars: allows use of an unqualified name only whtin the affected package, but across scopes.
    our:  An our declaration declares an alias for a package variable that will be visible across its
    entire lexical scope, even across package boundaries. The package in which the variable is entered is
    determined at the point of the decalaration, not at the piont of use.
    ---------------------------------------------------------
    package Foo;
    our $bar;       # Declares $Foo:bar for rest of lexical scope
    $bar = 20;
    
    package Bar;
    print $bar;     # Prints 20, as it referes to $Foo::bar    
    ---------------------------------------------------------    

Function Scope
    Function declarations are global in Perl. 
    
    
Two ways of using stastic variables    
    The first mothod is to use stat variable.
    ---------------------------------------------------------
    use strict;
    use warnings;
    use 5.010;
    
    sub count {
        state $counter = 0;
        $counter++;
        return $counter;
    }
    say count();       # Prints 1
    say count();       # Prints 2
    say count();       # Prints 3
    ---------------------------------------------------------    
    
    The second method is to use my and block.
    ---------------------------------------------------------
    use strict;
    use warnings;
    use 5.010;
    
    {
        my $counter = 0;
        sub conut {
            $counter++;
            return $counter;
            }
    }
    say count();       # Prints 1
    say count();       # Prints 2
    say count();       # Prints 3
    ---------------------------------------------------------

PDO
    A Pod bolock starts with ANY command paragraph, so a "=pod" command is usually just when you want to start a Pod block with
    and ordinary paragraph or verbatim paragraph.
    To end a Pod block, use a blank line, then a line beginning with "=cut", and a blank line after it.
    
    
-> operator
    "->" is an infix derefence operator, just as it is in C an C++. 
    If the right side if either a [...], {...}, or a (...) subscript, then the left side must be either
    a hard or symbolic reference to an array, a hash, or a subroutine respectively. (Or technically speaking,
    a location capable of holding a hard reference, if it's an array or hash reference being used for assignment.)
    
    Otherwise, the right side is method name or a simple scalar variable containing either the method name or
    a subroutine reference, and the left side must be either an object(a blessed reference) or a class name
    (that is, a package name).
    
+shift
    Unary plus is a NOP. It prevents ffrom what follows being interpreted as a bareword, and hence, from
    being autoquoted.    
    This is a just a way to disambiguating the shift in a location where it might be mistaken
    for another lexical item such as:
        print +join ' ', @array;


Quick multi-line comment
    Labeling the comments begins with '=begin comment', then uses '=end comment', then ends with '=cut'.
    -----------------------------------
    =begin comment
    
    my $str = "hello";
    print $str, "\n";
    
    =end comment
    
    =cut

    -----------------------------------
    
    
Bareword hash keys
    A bareword generally refers to a sequence of characters that is suitable for an identifier(i.e. A-Za-z_A-Za-z_0-9).
    The strict pragma bans most uses of barwords by default, but they still live on 
    [1] the names of global filehandles
    [2] things that are auto-quoted by the fat comma operator.
        example:  my %h = ( nanme => 'Foo');
    [3] keys that don't require quoting in hashes
        example:  print $h{name}, "\n";                
    In the latter two cases the set of allowed characters includes a leading hyphen '-'.
    
    Perl by default allows barewords--words without quotes--to behave like strings. For example:    
        my $x = hello;
        print "$x\n";           # Prints "hello"
    This is a bad example, "use strict;" alwayes.   
  
    The "pinball" in "$games{pinball}" will be identify as string keys.
    If you want to a builtin or a function to produce the hask key, you should use function argument parentheses,
    or prepend unary plus to force the evaluation of the builtin.
            # the literal 'shift' is the key
            my $value = $items{shift};
            
            # the value produced by shift is the key
            my $value = $items{shift @_};
            
            # unary plus uses the builtin shift
            my $value = $items{+shift};
            
    Without the * sigil, a bareword is just a string.  
            


Dispatch tables of coderefs
    from: https://www.xaprb.com/blog/2006/10/05/five-great-perl-programming-techniques-to-make-your-life-fun-again/
    What exactly is a dispatch table? It’s a hash of references to executable code. 
    -----------------------------------------------------------------
    #!/usr/bin/perl

    use strict;
    use warnings FATAL => 'all';

    use Term::ReadKey;

    sub display_a {
       print "I am in display_a\n";
    }

    sub display_b {
       print "I am in display_b\n";
    }

    my $dispatch_for = {
       a => \&display_a,
       b => \&display_b,
       q => sub { ReadMode('normal'); exit(0) },
    };

    while ( 1 ) {
       print "Press a key!\n";
       ReadMode('cbreak');
       my $char = ReadKey(10);
       defined $dispatch_for->{$char} && $dispatch_for->{$char}->();
    }

    -----------------------------------------------------------------
    my $dispatch_for = {
       a => \&display_a,
       b => \&display_b,
       q => sub { ReadMode('normal'); exit(0) },
       DEFAULT => sub { print "That key does nothing\n"; },
    };

    # Later
       my $func

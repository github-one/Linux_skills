PDO
    A Pod bolock starts with ANY command paragraph, so a "=pod" command is usually just when you want to start a Pod block with
    and ordinary paragraph or verbatim paragraph.
    To end a Pod block, use a blank line, then a line beginning with "=cut", and a blank line after it.
    
    
-> operator
    "->" is an infix derefence operator, just as it is in C an C++. 
    If the right side if either a [...], {...}, or a (...) subscript, then the left side must be either
    a hard or symbolic reference to an array, a hash, or a subroutine respectively. (Or technically speaking,
    a location capable of holding a hard reference, if it's an array or hash reference being used for assignment.)
    
    Otherwise, the right side is method name or a simple scalar variable containing either the method name or
    a subroutine reference, and the left side must be either an object(a blessed reference) or a class name
    (that is, a package name).
    
+shift
    Unary plus is a NOP. It prevents ffrom what follows being interpreted as a bareword, and hence, from
    being autoquoted.    
    This is a just a way to disambiguating the shift in a location where it might be mistaken
    for another lexical item such as:
        print +join ' ', @array;
           
Bareword hash keys
    The "pinball" in "$games{pinball}" will be identify as string keys.
    If you want to a builtin or a function to produce the hask key, you should use function argument parentheses,
    or prepend unary plus to force the evaluation of the builtin.
            # the literal 'shift' is the key
            my $value = $items{shift};
            
            # the value produced by shift is the key
            my $value = $items{shift @_};
            
            # unary plus uses the builtin shift
            my $value = $items{+shift};
            
    Without the * sigil, a bareword is just a string.  
            

Typeglobs and Filehandles
    Perl use an internal type called a typeglob to hold an entire symbol table entry. The type prefix
    of a typeglob is a * because it represents all types.
    This USED TO BE the prefered way to pass arrays and hashes by reference into a function, but now
    that we have real references, this is seldom needed.
    
    In Perl you can refer all objects of a particular name by prefix teh name with a star: *foo. 
    This is often known as a "typeglob", because the star on the front can be thought of as a wildcard
    match for all the funny prefix on vairables and subroutines and such.
    
    When evaluated, the typeglob produces a scalar value that represent all the objects of the name, including
    any filehandle, format, or subroutine. When assigned to, it causes the name mentioned to refer to whatever
    * value was assigned to it. Example:    
            sub double_array {
                local (*some_array) = @_;
                foreach $element (@some_array) {
                    $element *= 2;
                }
            }
            double_array (*foo);
            double_array (*bar);
 
        

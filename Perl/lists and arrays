
Question: Print a list with commas
    print join(',', @array);
    
    my @array = qw(one two three);
    {
        local $, = ',';
        print @array;
    }
    
    sub commify_series {
        (@_ == 0 ) ?    ''                     :
        (@_ == 1 ) ?    $_[0]                  :
        (@_ == 2 ) ?    join( " and ", @_)     :
                        join(", ", @_[0 .. ($#_ -1)], "and $_[-1]");
    }
        


Question: What is the difference between a list and an array?
    https://learn.perl.org/faq/perlfaq4.html#What-is-the-difference-between-a-list-and-an-array-
    http://perldoc.perl.org/perlfaq4.html#What-is-the-difference-between-a-list-and-an-array%3f
    
    
    A list is a fixed collection of scalars. 
    An array is a variable that holds a variable collection of scalars. 
    
    In internal sense an array is something that has a corresponding AV, which means that it can referenced and modified.
    A list is a temporary construct of an unmodifiable set of values on the stack.
    
    An array can supply its collection for list operations, so list operations also work on arrays:
        - slice:            (3,4,5,6,7,8)[2,3];   @array[2];  @array[2,3];
        - iterator:         foreach ( ) { }
        - supply an argument list (such as for a subroutine)

    Array operations, which change the list, only work on arrays.
        - shift, unshift, push, pop, and splice
        - $#animals = 1;        # truncate to two elements
          $#animals = 10000;    # pre-extend to 10,001 elements
        - $animals[0] = 'Rottweiler';
          qw( dog cat bird )[0] = 'Rottweiler'; # syntax error!

            foreach ( @animals ) {
                s/^d/fr/;  # works fine
            }
            foreach ( qw( dog cat bird ) ) {
                s/^d/fr/;  # Error! Modification of read only value!
            }
         - my $count = @animals;                    # only works with arrays   
           my $scalar = ( 'dog', 'cat', 'bird' );   # $scalar gets bird
           

-------------------  Important things about List vs Array ------------------------------------------------
    [1]
    The context effect applies to the expression itself, not to its value. 
    All contextual effects occur at compile time, never at run time, and at compile time there are no values; 
    the values do not appear until run time, after all the contextual effects are resolved.

    [2]
        @a is an array expression. In a list context, its value is the list of elements from the array. 
            In scalar context, its value is the length of the array.

        (1,2,3) is not a list. It is a comma expression. In list context, its value is a list of the values of 
            the items separated by the commas. In scalar context, its value is the value of the last item.

        @a[0..2] is not a list. It is an array slice expression. In list context, its value is a list of 
            the array elements you selected. In scalar context, its value is the value of the last array element you selected.

        localtime() is not a list. It is a localtime expression. In list context, its value is a list of the current seconds, 
            minutes, hours, days, and so on. In scalar context, its value is a string representing the current time.

           
-------------------  More Explanation about List vs Array ------------------------------------------------
https://www.perlmonks.org/?node_id=72247

[Input]
        use strict;
        my @array = ('foo', 'bar', 'baz');
        my $temp;
        
        $temp = @array;
        print "$temp\n";
        $temp = ('foo', 'bar', 'baz');
        print "$temp\n";
        ($temp) = @array;
        print "$temp\n";
        ($temp) = @array[0..2];
        print "$temp\n";
        $temp = @array[0..2];
        print "$temp\n";

[output]
        3
        baz
        foo
        foo
        baz



https://stackoverflow.com/questions/14001741/what-is-the-difference-between-lists-and-arrays
    I now believe these to be true:

    - An array in scalar context becomes a count of its elements.
    - The comma operator in scalar context returns the last element.
    - You can't make a reference to a list; \(2, 4, 6) returns a list of references to the scalars in the list. 
        You can use [2, 4, 6] to make a reference to an anonymous array.
    - You can index a list (to get its nth element) without making an array if you make a list slice, so (2, 4, 6)[1] is 4.
        
    But what if I want to count the elements in a list, or get the last element of an array? 
    Should I convert between arrays and lists somehow?

    You can always convert a list to an array with [...] syntax. One way to count the elements in a list is 
    to make an anonymous array, then immediately dereference it in scalar context, like so:
        sub list { return qw(carrot stick); }
        my $count = @{[list()]};
        print "Count: $count\n";  # Count: 2

    Another way is to use the list assignment operator, like so:
        sub list { return qw(carrot stick); }
        my $count = (()=list());
        print "Count: $count\n";  # Count: 2
    
    There is no array in this code, but the list assignment operator returns the number of things being assigned. 
    I assign them to an empty list of variables. In code golf, I write ()=$str=~/reg/g to count the regular expression 
    matches in some string.

    You need not convert an array to a list, because an array in list context is already a list. 
    If you want the last element of an array, just say $array[-1].

    The comma operator would return the last element of a list, but I can't use it to get the last element of an array. 
    If I say ((),@array) in scalar context, then @array is in scalar context and I get the count.

    You need not make an array to index a list. You can make an anonymous array, as in [list()]->[1], 
    or you can make a list slice, as in (list())[1]. I had trouble with list slices because they have different syntax. 
    A list slice needs parentheses! In C or Python or Ruby, func()[1] would do the array index on the function's return value, 
    but in Perl, func()[1] is a syntax error. You must say (func())[1].

    For example, I want to print the 3rd highest number in array. Because I'm lazy, 
    I sort the array and take the 3rd last element:
    
        my @array = (112, 101, 114, 108, 32, 104, 97, 99, 107);
        print +(sort { $a <=> $b } @array)[-3], "\n";  # prints 108
        The unary + prevents the print() function stealing my parentheses.

    You can use a list slice on an array, as in (@array)[1]. This works because an array is a list. 
    The difference between lists and arrays is that arrays can do $array[1].

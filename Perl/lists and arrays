
Question: Print a list with commas
    print join(',', @array);
    
    my @array = qw(one two three);
    {
        local $, = ',';
        print @array;
    }
    
    sub commify_series {
        (@_ == 0 ) ?    ''                     :
        (@_ == 1 ) ?    $_[0]                  :
        (@_ == 2 ) ?    join( " and ", @_)     :
                        join(", ", @_[0 .. ($#_ -1)], "and $_[-1]");
    }


Question: What is the difference between a list and an array?
    https://learn.perl.org/faq/perlfaq4.html#What-is-the-difference-between-a-list-and-an-array-
    http://perldoc.perl.org/perlfaq4.html#What-is-the-difference-between-a-list-and-an-array%3f
    
    
    A list is a fixed collection of scalars. 
    An array is a variable that holds a variable collection of scalars. 
    
    In internal sense an array is something that has a corresponding AV, which means that it can referenced and modified.
    A list is a temporary construct of an unmodifiable set of values on the stack.
    
    An array can supply its collection for list operations, so list operations also work on arrays:
        - slice:            (3,4,5,6,7,8)[2,3];   @array[2];  @array[2,3];
        - iterator:         foreach ( ) { }
        - supply an argument list (such as for a subroutine)

    Array operations, which change the list, only work on arrays.
        - shift, unshift, push, pop, and splice
        - $#animals = 1;        # truncate to two elements
          $#animals = 10000;    # pre-extend to 10,001 elements
        - $animals[0] = 'Rottweiler';
          qw( dog cat bird )[0] = 'Rottweiler'; # syntax error!

            foreach ( @animals ) {
                s/^d/fr/;  # works fine
            }
            foreach ( qw( dog cat bird ) ) {
                s/^d/fr/;  # Error! Modification of read only value!
            }
         - my $count = @animals;                    # only works with arrays   
           my $scalar = ( 'dog', 'cat', 'bird' );   # $scalar gets bird
           

-------------------  Important things about List vs Array ------------------------------------------------
    [1]
        The context effect applies to the expression itself, not to its value. 
        All contextual effects occur at compile time, never at run time, and at compile time there are no values; 
        the values do not appear until run time, after all the contextual effects are resolved.

    [2]
        @a is an array expression. In a list context, its value is the list of elements from the array. 
            In scalar context, its value is the length of the array.

        (1,2,3) is not a list. It is a comma expression. In list context, its value is a list of the values of 
            the items separated by the commas. In scalar context, its value is the value of the last item.

        @a[0..2] is not a list. It is an array slice expression. In list context, its value is a list of 
            the array elements you selected. In scalar context, its value is the value of the last array element you selected.

        localtime() is not a list. It is a localtime expression. In list context, its value is a list of the current seconds, 
            minutes, hours, days, and so on. In scalar context, its value is a string representing the current time.

    [3]
        The Perl documentation has two different things that both end up being casually called "list": 
        "list values" and "list literals". 
        A "list literal" is that comma-ish thing that turns into the comma operator in a scalar context (last value wins). 
        A "list value" is the result from executing an operator in a list context. And yes, 
        a list literal yields a list value in a list context, hence leading to the casual use of "list" for both.

    [4]
        About array:
        - The @ character can be used to introduce an array (if you can't use @ with what you have, then you don't have an array)
        - This means that you can use an array with push, pop, shift, unshift, and splice.
        - You can get a reference to an entire array. You can't get a reference to an entire non-array "list" 
            except using [ ... ] which is cheating because it makes a new array, copies the "list" into it, 
            and then gives you back a reference to the new array.
        
        About list:
        Many of the meanings of "list" in Perl come close to "a list of scalar values", 
        but that still doesn't nail things down very specifically. You can have:

          -  a "list literal" might be used to mean "a list of scalar-value expressions separated by commas and surrounded by parens"
          -  a list of SVs arranged together in memory, such as on the stack
          -  "an operation that would return a list of scalar values if used in a list context"
          -  the argument list passed to a subroutine
          -  what goes between the parens in a foreach statement -- it is naively a "list of scalar values" 
                but is functionally much more like an "argument list" but calling it the latter would confuse people.
     
     [5]
        https://www.perlmonks.org/?node_id=130861
        An array is like a list of scalar values with an extra chunk of data that keeps track of bookkeeping information
        about where the list is, how much space is allocated for the list, etc. 
        This means that you can add items to the list of values stored in an array because the that extra chunk of data 
        allows the array to reallocate space to make more room. 
     
        A hash is like an array. You could think of it as a container for a list of pairs 
        (where each pair is one string and one scalar value). If you take the contents of a hash out of the hash, 
        you have a "list" (of scalar values, every other one of which must be just a string).
     
        A "list" is a rather temporary thing. 
        If you want to find out how many things are in a list, you can do:     my $size= ()= LIST;
        but now you've lost the "list" and so you'll either have to recreate or keep a copy of it. 
        And about the only way to keep a copy of it is to stuff it into an array. 
        
        Similarly, if you want the last item of a list, you can use     my $last= (LIST)[-1];
        but you had better not have wanted to know anything else about the list as you've now lost it again.

        Sure, you can get several items out of the list at once using a list slice. 
        But you can't get several items out of the list and also record the size of the list unless 
        you put the list into an array at least temporarilly. 
        
        Even passing a list into a function causes Perl to place that list into an array (@_) for you.
     
     [6]
        An array has a changeable length.  A list does not.  
        An array is something you can push or pop, while a list is a set of values.  
        Some people make the distinction that a list is a value while an array is a variable.  
        Subroutines are passed and return lists, you put things into list context, you initialize arrays 
        with lists, and you foreach() across a list.  
        "@" variables are arrays, anonymous arrays are arrays, arrays in scalar context behave like the number 
        of elements in them, subroutines access their arguments through the array "@_", and push/pop/shift 
        only work on arrays.
           
     
     [7]
        When a hase is passed as a parameter to a subroutine, the hash will be flattened into lists, where
        the key/value pairs are guaranteed to remain adjacent and in 'key', 'value' order, but the ordering of
        the pairs is not necessarily deterministic.
        (Note: prototypes can alter this behavior.)
        
     
-------------------  More Explanation about List vs Array ------------------------------------------------
https://www.perlmonks.org/?node_id=72247
note: comments provide more explanations.

[Input]
        use strict;
        my @array = ('foo', 'bar', 'baz');
        my $temp;
        
        $temp = @array;
        print "$temp\n";
        $temp = ('foo', 'bar', 'baz');
        print "$temp\n";
        ($temp) = @array;
        print "$temp\n";
        ($temp) = @array[0..2];
        print "$temp\n";
        $temp = @array[0..2];
        print "$temp\n";

[output]
        3
        baz
        foo
        foo
        baz
        
---------------------------------------------------------------------------------------------------------------------
Perl5-porters got email about a year ago from a guy who was reporting the following bug:
    Following is an account of what could be a bug in perl.
      $ perl -e 'print "count is ", scalar(undef, undef), "\n"'
        count is
Note that count is undefined here, though it should have been 2.
This guy had the same idea you did: (undef, undef) is a list of two items, and scalar() should count the items. 
But scalar does no such thing. It changes the way the way the program is compiled, 
so that the comma operator returns its second operand, instead of constructing a list value.


---------------------------------------------------------------------------------------------------------------------
https://stackoverflow.com/questions/14001741/what-is-the-difference-between-lists-and-arrays
    I now believe these to be true:

    - An array in scalar context becomes a count of its elements.
    - The comma operator in scalar context returns the last element.
    - You can't make a reference to a list; \(2, 4, 6) returns a list of references to the scalars in the list. 
        You can use [2, 4, 6] to make a reference to an anonymous array.
    - You can index a list (to get its nth element) without making an array if you make a list slice, so (2, 4, 6)[1] is 4.
        
    But what if I want to count the elements in a list, or get the last element of an array? 
    Should I convert between arrays and lists somehow?

    You can always convert a list to an array with [...] syntax. One way to count the elements in a list is 
    to make an anonymous array, then immediately dereference it in scalar context, like so:
        sub list { return qw(carrot stick); }
        my $count = @{[list()]};
        print "Count: $count\n";  # Count: 2

    Another way is to use the list assignment operator, like so:
        sub list { return qw(carrot stick); }
        my $count = (()=list());
        print "Count: $count\n";  # Count: 2
    
    There is no array in this code, but the list assignment operator returns the number of things being assigned. 
    I assign them to an empty list of variables. In code golf, I write ()=$str=~/reg/g to count the regular expression 
    matches in some string.

    You need not convert an array to a list, because an array in list context is already a list. 
    If you want the last element of an array, just say $array[-1].

    The comma operator would return the last element of a list, but I can't use it to get the last element of an array. 
    If I say ((),@array) in scalar context, then @array is in scalar context and I get the count.

    You need not make an array to index a list. You can make an anonymous array, as in [list()]->[1], 
    or you can make a list slice, as in (list())[1]. I had trouble with list slices because they have different syntax. 
    A list slice needs parentheses! In C or Python or Ruby, func()[1] would do the array index on the function's return value, 
    but in Perl, func()[1] is a syntax error. You must say (func())[1].

    For example, I want to print the 3rd highest number in array. Because I'm lazy, 
    I sort the array and take the 3rd last element:
    
        my @array = (112, 101, 114, 108, 32, 104, 97, 99, 107);
        print +(sort { $a <=> $b } @array)[-3], "\n";  # prints 108
        The unary + prevents the print() function stealing my parentheses.

    You can use a list slice on an array, as in (@array)[1]. This works because an array is a list. 
    The difference between lists and arrays is that arrays can do $array[1].

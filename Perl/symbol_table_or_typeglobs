Typeglobs
    Perl uses an internal type called a typeglob to hold an entire symbol table entry.
    The type prefix of a typeglob is a '*', because it represenets all types. 
    This USED TO BE the preferred way to pass arrays and hashes by reference into a function, 
    but now that we have real reference, this is seldom needed. 
        
    In Perl you can refer all objects of a particular name by prefix teh name with a star: *foo. 
    This is often known as a "typeglob", because the star on the front can be thought of as a wildcard
    match for all the funny prefix on vairables and subroutines and such.
    
    When evaluated, the typeglob produces a scalar value that represent all the objects of the name, including
    any filehandle, format, or subroutine. When assigned to, it causes the name mentioned to refer to whatever
    * value was assigned to it. 
    
Usage    
    [1] The main use of typeglobs in modern Perl is create symbol table aliases.
    
        *this = *that;          # Makes $this an alias for $that, @this an alias for @that, ... etc.
        local *Here::blue = \$There::green      # Much safer method, only for $Here::blue an alais for $There::green
                                                # but doesn't make @Here::blue an alias for @There::green
                                                
    [2] Another use of typeglobs is to pass filehandles into a function or to create new filehandles.
        $fh = *STDOUT;
        $fh = \*STDOUT;     # A real reference
        
        Typeglobs are also a way to create a local filehandle using local() operator.
        sub newopen {
            my $path = shift;
            local *FH;              # Not my!
            open (FH, $path) or return undef;
            return *FH;
        }
        $fh = newopen('/etc/passwd');
        
    [3] The usage of "open my $fh, ..." largely eliminates the need for typeglobs.
        All functions that capable of creating filehandles (open, opendir, socketpair, sysopen, socket, and accetp)
        automatically create an anonymous fllehandle passed to them is an uninitialized scalar variable.
        This allow the contructs such as open(my $fh, ...) and open(local $fh, ...) to be used to created filehandles
        that will conveniently be closed automatically when the scope ends, provided there are no other reference
        to them.
        sub myopen {
            open my $fh, "@_" or die "Can't open '@_': $!";     # note
            return $fh;
        }
        {
            my $f = myopen("</etc/motd");
            print <$f>;
        }
        # note:  If an initialized scalar variable is used instead the result is different: 
            my $fh = 'zzz'; 
            open $fh, ...
          The above is equivalent to open(*{'zzz'}, ...),  use strict 'refs' to forbids such practice.
          

    [4] Passing symbol table entries(typeglobs) to subroutines
        Warning: The new reference mechanism in modern Perl is better and easier.
        
        Sometimes you don't want to pass the value of an array to a subroutine but rather the name of it,
        so that the subroutine can modify the global copy of it rather than working with a local copy.
        sub double_array {
            local (*some_array) = @_;
            foreach $element (@some_array) {
                $element *= 2;
            }
        }
        double_array(*foo);
        double_array(*bar);



Difference between \*DATA and *DATA    
    my $fh = *DATA;         # a glob
    my $fh = \*DATA;        # a reference to a glob
    
    Most places accept both. Many also accept the name of the glob as a string, and many accept a reference to IO object.
        # Symbolic reference to the glob that contains the IO object.
        >perl -E"$fh = 'STDOUT';    say $fh 'hi'"
        hi

        # Reference to the glob that contains the IO object.
        >perl -E"$fh = \*STDOUT;    say $fh 'hi'"
        hi

        # Glob that contains the IO object.
        >perl -E"$fh = *STDOUT;     say $fh 'hi'"
        hi

        # Reference to the IO object.
        >perl -E"$fh = *STDOUT{IO}; say $fh 'hi'"
        hi

    open(my $fh, '<', ...) populates $fh with a reference to a glob, and it's the most supported.
        
    
    The following script compares and contrasts the difference between these two methods.
        use strict;
        use warnings;

        use Fcntl qw(:seek);

        # Compare Indirect Filehandle Notation
        my %hash = (
            '\*DATA' => \*DATA,
            '*DATA'  => *DATA,
        );

        my $pos = tell DATA;

        my $fmt = "%-8s %-22s %-7s %s\n";
        printf $fmt, qw(Name Value ref() readline());

        while ( my ( $name, $fh ) = each %hash ) {
            seek( $fh, $pos, SEEK_SET );    # Rewind FH
            chomp( my $line = <$fh> );
            printf $fmt, $name, $fh, ref($fh), $line;
        }

        __DATA__
        Hello World

    Output:
        Name     Value                  ref()   readline()
        \*DATA   GLOB(0x7fdc43027e70)   GLOB    Hello World
        *DATA    *main::DATA                    Hello World    
        
        

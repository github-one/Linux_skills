Print
    %hash = ('foo'=>1, 'bar'=>3);
    print %hash;                    # not good enogh, result: bar3fool1
    print "%hash";                  # error, result: %hash
    print join ",", %hash;          # a little better, result: bar,3,foo,1
    @a=%hash; print "@a\n";         # a little better, rersult: bar 3 foo 1
    print "@{ [%hash] }\n";         # using anonymouse array reference trick
    
    foreach $key (keys %hash) {             # this is the most common method.
        print "$key => $hash{$key}\n";
        }
    while( ($key, $value) = each %hash ) {
        print "key => $value\n";
        }
    
    print map { "key:$_ => value:$hash{$_}\n" } keys %hash;    
    use Data::Dumper;
    print Dumper %hash;     # ok, but not great
    print Dumper \%hash;    # much better
    
    
Length
    print scalar keys %hash;
    print scalar(keys %hash);
    
%$var
     $days               # the simple scalar value "days"
     $days[28]           # the 29th element of array @days
     $days{'Feb'}        # the 'Feb' value from hash %days
     $#days              # the last index of array @days
     %$arg_ref           # hash dereferenced from the value "arg_ref", another way to write it is %{$arg_ref}.
     
     note:
     Scalar values are always named with '$', even when referring to a scalar that is part of an array or a hash.
     The '$' symbol works semantically like the English word "the" in that it indicates a single value is expected.
     To create a hash reference you could start with a hash, or with an anonymous hash reference:
            soem_sub(\%hash);
            som_sub( {pi => 3.14, C => 4});
     
Hash slice technique
    my %new_hash;
    @new_hash( @desired_keys ) = @old_hash( @desired_Keys );
    
    If you want to extract some key/vaule pairs from a hash, there are some ways to do it.
    Method #1: foreach
        my @desired_keys = qw(a c);
        my %new_hash;
        foreach my $key (@desired_keys) {
            $new_hash{ $key } = $old_hash{ $key };
        }
    Method #2: map
        my %new_hash = map { $_ => $old_hash{ $_ } } @desired_keys;
    Method #3: slice
        my %new_hash;
        @new_hash( @desired_keys ) = @old_hash( @desired_Keys );
       
      

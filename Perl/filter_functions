map, grep and sort
    Each of these operators receives a code block (or an expression) which is used to transform, 
    filter or compare elements of the list.
    
    For map, the result of the block becomes one (or more) element(s) in the new list. 
    The current element is aliased to $_.

    For grep, the boolean result of the block decides if the element of the original list will be copied into the new list. 
    The current element is aliased to $_.

    For sort, the block receives two elements (aliased to $a and $b) and is expected to return one of -1, 0 or 1, 
    indicating whether $a is greater, equal or less than $b.


grep
    The grep function takes two arguments: a block and a list of values. There is no comma between the block and the list.
    In SCALAR context grep will return the number of elements that went though the filter.
    Note: The grep function is not limited to using regular expressions. The block can be any expression.
    
    my @numbers = qw( 8 2 5 12 7 3 2 1 );
    my @big_nmubers = grep { $_ > 4 } @numbers;
    print "@big_numbers\n"
    
    my @files = glob "*.log";
    my old_files = grep { -M $_ > 365 } @files;
    print join "\n", @old_files;
    
    my $regex = shift;
    print grep { $_ =~ /$regex/ } <>;
    
    my @foo = grep( !/^#/, @bar );      # Weed out comments
    my @foo = grep {!/^#/} @bar;        # The same thing
    
    @unique = grep { ++$count{$_} < 2 } qw(a b c d e a e f h h h);
    print "@unique\n";
    
    # List all the text files in the current directory.
    my @files = grep { -f and -T } glob '* .*"
    print "@files\n";
    Note: '*' matches all files but not '.xxx', while '.*' matches all files beginning with '.'
    
any
    The any function has the same syntax as grep, but only return true or false. It will short circuit on large lists
    so this function can be a lot faster.
    
    use List::MoreUtils qw(any)
    if (any { $visitor eq $_ } @names {
        print "Visitor $visitor is in the guest list\n";
    } else {
        print "Visitor $visitor is NOT in the guest list\n";
    }
    
      
map
    In SCALAR context, the map function returns the total number of elements so genereated.
    my @chars = map(char, @numbers);
    my @squares = map {$_ * $_ } @numbers;
    
    my @squares = map { $_ > 5 ? ($_ * $_) : () } @numbers;     # '()' will omit an element
    my @squares = map { $_ * $_ } grep { $_ > 5} @numbers;      # the same
    
    my %hash = map { get_a_key_for($_) = > $_ } @array;         # the elements becom key/value pairs.
    my %hash;
    foreach (@array) { $hash{get_a_key_for($_)} = $_; }         # the same      
    
    Note: '{' may start both hash references and blocks, but Pelr doesn't look ahead for the closing '}', 
    so Perl has to take a guess at which it's dealing with BASED on what if finds just after the '{'.
    The syntax error will be reported if the guess is wrong even before it gets to the '}'.
    So, DON NOT let Perl guess!
    
    my %hash = map { "\L$_" => 1 } @array           # perl guesses EXPR for hash reference. wrong!
    my %hash = map { +"\L$_" => 1 } @array          # perl guesses BLOCK. right
    my %hash = map {; "\L$_" => 1 } @array          # perl guesses BLOCK. right
    my %hash = map { ("\L$_" => 1) } @array         # perl guesses BLOCK. right
    my %hash = map { lc($_) => 1) } @array          # perl guesses BLOCK. right
    my %hash = map +( lc($_) => 1) ), @array        # perl guesses EXPR. right. note: the comma
    my %hash = map ( lc($_), 1) ), @array           # wrong. RHS turns out to be "map(xx,1)", then ",",  then @array.
                                                    # The result is definitely not what you want!    
    
    Each element need NOT necessarily map to a single item. If multiple values are created, map returns them
    asll as a SINGLE, FLATTENED LIST. 
        @words = map split, @phrases;       # Split all words in all phrases into a single list.
        
        @tokens = map { [split /:/] } @original_lines[6..14]
        # Brackets are used as the array subscriptor operator in [6..14], and the curlies are used to form a block.
        
        
    some elegang examples of map
        @files_size = map { -s $_ } @files_name;
        %dictionary = map { ($_, 1) } qw( cat dog man woman hat glove );
        %dictionary = map {$_, 1} qw( cat dog man woman hat glove );
        @caps = map uc, @phrases;
        @first_word = map { /(S+)/ } @phrases;
        $title = join ' ', map ( ucfirst lc } split / /, $name;
        
    
    
